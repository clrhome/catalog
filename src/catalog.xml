<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://tibasicdev.wikidot.com/home" xmlns:axe="http://www.omnimaga.org/index.php?board=71.0" xmlns:grammer="http://clrhome.org/grammer/"><token/><token id="&gt;DMS" axe:id="&gt;Tok" chars="\x05DMS" axe:chars="\x05Tok"><syntax>&lt;value&gt;▶DMS</syntax><description>Displays &lt;value&gt; in DMS format.</description><keys>(2nd) [ANGLE] ANGLE 4:▶DMS</keys><axe:syntax>Disp &lt;pointer&gt;▶Tok OR Text &lt;pointer&gt;▶Tok</axe:syntax><axe:description>Displays the token whose token value is the one- or two-byte value at &lt;pointer&gt;.</axe:description><axe:size/><axe:time/></token><token id="&gt;Dec" chars="\x05Dec"><syntax>&lt;value&gt;▶Dec</syntax><description>Displays a real or complex number, expression, list, or matrix in decimal format.</description><keys>(MATH) MATH 2:▶Dec</keys><axe:syntax>Disp &lt;value&gt;▶Dec</axe:syntax><axe:description>Displays &lt;value&gt; as a positive number.</axe:description><axe:size/><axe:time/></token><token id="&gt;Frac" axe:id="&gt;Char" chars="\x05Frac" axe:chars="\x05Char"><syntax>&lt;value&gt;▶Frac</syntax><description>Displays a real or complex number, expression, list, or matrix as a fraction simplified to its simplest terms.</description><keys>(MATH) MATH 1:▶Frac</keys><axe:syntax>Disp &lt;value&gt;▶Char OR Text &lt;value&gt;▶Char</axe:syntax><axe:description>Displays &lt;value&gt; as a character.</axe:description><axe:size/><axe:time/></token><token id="-&gt;" chars="\x1c"><syntax>&lt;value&gt;→&lt;variable&gt;</syntax><description>Stores &lt;value&gt; into &lt;variable&gt;, which should be of a type compatible with &lt;value&gt;.</description><keys>(STO→)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description>Stores a value</grammer:description></token><token id="Boxplot" chars="Boxplot"><syntax>Plot&lt;plotnumber&gt;(Boxplot,&lt;xlistname&gt;{,&lt;freqlist&gt;})</syntax><description>Defines plot 1, 2, or 3 as a box-and-whisker plot for &lt;xlistname&gt; and optional &lt;freqlist&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 5:Boxplot</keys></token><token id="[" chars="\xc1"><syntax>[&lt;data&gt;]</syntax><description>Used to define matrices, [ and ] are used to surround the data in a row as well as all the rows in a matrix. For example, [[0,1][2,3][4,5]] is a matrix of three rows and two columns.</description><keys>(2nd) [[]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="]" chars="]"><syntax>[&lt;data&gt;]</syntax><description>Used to define matrices, [ and ] are used to surround the data in a row as well as all the rows in a matrix. For example, [[0,1][2,3][4,5]] is a matrix of three rows and two columns. At the end of a line or right before →, the right parenthesis can be omitted.</description><keys>(2nd) []]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="{" chars="{"><syntax>{&lt;data&gt;}</syntax><description>Used to define lists, { and } surround the numbers in the list, separated by commas. For example, {0,1,2} is a three-element list.</description><keys>(2nd) [{]</keys><axe:syntax>{EXP}</axe:syntax><axe:description>Returns the single byte the expression points to. It will be in the range 0 to 255.</axe:description><axe:syntax-r/><axe:description-r/><axe:syntax-r-r/><axe:description-r-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="}" chars="}"><syntax>{&lt;data&gt;}</syntax><description>Used to define lists, { and } surround the numbers in the list, separated by commas. For example, {0,1,2} is a three-element list. At the end of a line or right before →, the right parenthesis can be omitted.</description><keys>(2nd) [}]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:syntax-r-r/><axe:description-r-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="^^r" chars="\x15"><syntax>&lt;angle&gt;ʳ</syntax><description>Interprets &lt;angle&gt; as radians.</description><keys>(2nd) [ANGLE] ANGLE 2:ʳ</keys><axe:syntax>ʳ</axe:syntax><axe:description>Modifies the function of many commands. See the commands for more information.</axe:description><grammer:syntax/><grammer:description/></token><token id="^^o" chars="\x14"><syntax>&lt;degrees&gt;°{&lt;minutes&gt;'{&lt;seconds&gt;"}}</syntax><description>Interprets &lt;degrees&gt; as degrees; designates degrees in DMS format.</description><keys>(2nd) [ANGLE] ANGLE 1:°</keys><axe:syntax>{&lt;pointer&gt;→}°&lt;variable&gt;</axe:syntax><axe:description>Gets or sets the address at which &lt;variable&gt; is stored. If setting the address, &lt;variable&gt; should be a custom variable (with two or more characters in its name).</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="^^-1" chars="\x11"><syntax>&lt;value&gt;⁻¹</syntax><description>Returns 1 divided by a real or complex number, expression, or elements of a list, or a matrix inverted.</description><keys>(x⁻¹)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="^^2" chars="\x12"><syntax>&lt;value&gt;²</syntax><description>Returns &lt;value&gt; multiplied by itself, or elements of list &lt;value&gt; squared. &lt;value&gt; can be a real or complex number, expression, list, or matrix.</description><keys>(x²)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="^^T" chars="\x16"><syntax>&lt;matrix&gt;ᵀ</syntax><description>Returns a matrix in which each element (row,column) is swapped with the corresponding element (column,row) of matrix &lt;matrix&gt;.</description><keys>(2nd) [MATRIX] MATH 2:ᵀ</keys><axe:syntax>ᵀ&lt;token&gt;</axe:syntax><axe:description>Interprets &lt;token&gt; as a token value, converting it to an integer.</axe:description><axe:size/><axe:time/></token><token id="^^3" chars="\xd5"><syntax>&lt;value&gt;³</syntax><description>Returns the cube of a real or complex number, expression, list, or square matrix.</description><keys>(MATH) MATH 3:³</keys></token><token id="(" chars="("><syntax>(&lt;exp&gt;)</syntax><description>Everything inside parentheses take precedence when the line is evaluated.</description><keys>(2nd) [(]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id=")" chars=")"><syntax>{&lt;command&gt;}(&lt;data&gt;)</syntax><description>The right parenthesis closes either a parenthetical expression or any command containing a left parenthesis. At the end of a line or right before →, the right parenthesis can be omitted.</description><keys>(2nd) [)]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="round(" chars="round("><syntax>round(&lt;value&gt;,&lt;number&gt;)</syntax><description>Returns a number, expression, list, or matrix rounded to &lt;number&gt; decimal places (less than or equal to nine).</description><keys>(MATH) NUM 2:round(</keys></token><token id="pxl-Test(" chars="pxl-Test("><syntax>pxl-Test(&lt;row&gt;,&lt;column&gt;)</syntax><description>Returns 1 if the pixel at row &lt;row&gt; and column &lt;column&gt; is on, 0 if it is off; &lt;row&gt; is between 0 and 62 and &lt;column&gt; is between 0 and 94.</description><keys>(2nd) [DRAW] POINTS 7:pxl-Test(</keys><axe:syntax>pxl-Test(&lt;x&gt;,&lt;y&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>Returns 1 if pixel is black and 0 if pixel is white at (&lt;x&gt;,&lt;y&gt;) on the main buffer or specified buffer.</axe:description><axe:syntax-r>pxl-Test(&lt;x&gt;,&lt;y&gt;)ʳ</axe:syntax-r><axe:description-r>Returns 1 if pixel is black and 0 if pixel is white at (&lt;x&gt;,&lt;y&gt;) on the back buffer.</axe:description-r><axe:size/><axe:time/></token><token id="augment(" chars="augment("><syntax>augment(&lt;valueA&gt;,&lt;valueB&gt;)</syntax><description>Returns a matrix, which is matrix &lt;valueB&gt; appended to matrix &lt;valueA&gt; as new columns, or a list, which is list &lt;valueB&gt; concatenated to the end of list &lt;valueA&gt;.</description><keys>(2nd) [MATRX] MATH 7:augment(</keys><grammer:syntax>augment(&lt;n&gt;,&lt;offset&gt;,&lt;varname&gt;)</grammer:syntax><grammer:description>Inserts &lt;n&gt; bytes into the variable &lt;varname&gt; at offset &lt;offset&gt;. Should not be used for lists or matrices.</grammer:description></token><token id="rowSwap(" chars="rowSwap("><syntax>rowSwap(&lt;matrix&gt;,&lt;rowA&gt;,&lt;rowB&gt;)</syntax><description>Returns a matrix with row &lt;rowA&gt; of &lt;matrix&gt; swapped with row &lt;rowB&gt;.</description><keys>(2nd) [MATRX] MATH C:rowSwap(</keys></token><token id="row+(" chars="row+("><syntax>row+(&lt;matrix&gt;,&lt;rowA&gt;,&lt;rowB&gt;)</syntax><description>Returns a matrix with row &lt;rowA&gt; of &lt;matrix&gt; added to row &lt;rowB&gt; and stored in &lt;rowB&gt;.</description><keys>(2nd) [MATRX] MATH D:row+(</keys></token><token id="*row(" chars="*row("><syntax>*row(&lt;value&gt;,&lt;matrix&gt;,&lt;row&gt;)</syntax><description>Returns a matrix with row &lt;row&gt; of &lt;matrix&gt; multiplied by &lt;value&gt; and stored in row &lt;row&gt;.</description><keys>(2nd) [MATRX] MATH E:*row(</keys></token><token id="*row+(" chars="*row+("><syntax>*row+(&lt;value&gt;,&lt;matrix&gt;,&lt;rowA&gt;,&lt;rowB&gt;)</syntax><description>Returns a matrix with row &lt;rowA&gt; of &lt;matrix&gt; multiplied by &lt;value&gt;, added to &lt;rowB&gt;, and stored in &lt;rowB&gt;.</description><keys>(2nd) [MATRX] MATH F:*row+(</keys></token><token id="max(" chars="max("><syntax>max(&lt;valueA&gt;{,&lt;valueB&gt;})</syntax><description>Returns the larger of &lt;valueA&gt; and &lt;valueB&gt;, a list containing the larger of each pair of elements in real or complex lists &lt;valueA&gt; and &lt;valueB&gt;, or the largest real or complex argument in &lt;valueA&gt; if &lt;valueB&gt; is not given.</description><keys>(MATH) NUM 7:max(</keys><axe:syntax>max(&lt;valueA&gt;,&lt;valueB&gt;)</axe:syntax><axe:description>Returns the greater of the two values.</axe:description><axe:size/><axe:time/></token><token id="min(" chars="min("><syntax>min(&lt;valueA&gt;{,&lt;valueB&gt;})</syntax><description>Returns the smaller of &lt;valueA&gt; and &lt;valueB&gt;, a list containing the smaller of each pair of elements in real or complex lists &lt;valueA&gt; and &lt;valueB&gt;, or the smallest real or complex argument in &lt;valueA&gt; if &lt;valueB&gt; is not given.</description><keys>(MATH) NUM 6:min(</keys><axe:syntax>min(&lt;valueA&gt;,&lt;valueB&gt;)</axe:syntax><axe:description>Returns the smaller of the two values.</axe:description><axe:size/><axe:time/></token><token id="R&gt;Pr(" chars="R\x05Pr("><syntax>R▶Pr(&lt;x&gt;,&lt;y&gt;)</syntax><description>Returns the r-value, given rectangular coordinates &lt;x&gt; and &lt;y&gt; or a list of rectangular coordinates.</description><keys>(2nd) [ANGLE] ANGLE 5:R▶Pr(</keys><grammer:syntax/><grammer:description/></token><token id="R&gt;Ptheta(" chars="R\x05P[("><syntax>R▶Pθ(&lt;number1&gt;,&lt;number2&gt;)</syntax><description>Returns the θ-value, given rectangular coordinates &lt;x&gt; and &lt;y&gt; or a list of rectangular coordinates.</description><keys>(2nd) [ANGLE] ANGLE 6:R▶Pθ(</keys><grammer:syntax/><grammer:description/></token><token id="P&gt;Rx(" chars="P\x05Rx("><syntax>P▶Rx(&lt;r&gt;,&lt;angle&gt;)</syntax><description>Returns the x-value, given polar coordinates &lt;r&gt; and &lt;angle&gt; or a list of polar coordinates.</description><keys>(2nd) [ANGLE] ANGLE 7:P▶Rx(</keys><grammer:syntax/><grammer:description/><grammer:syntax-l/><grammer:description-l/></token><token id="P&gt;Ry(" chars="P\x05Ry("><syntax>P▶Ry(&lt;r&gt;,&lt;angle&gt;)</syntax><description>Returns the y-value, given polar coordinates &lt;r&gt; and &lt;angle&gt; or a list of polar coordinates.</description><keys>(2nd) [ANGLE] ANGLE 8:P▶Ry(</keys><grammer:syntax/><grammer:description/></token><token id="median(" chars="median("><syntax>median(&lt;list&gt;{,&lt;freqlist&gt;})</syntax><description>Returns the median of &lt;list&gt; with frequency &lt;freqlist&gt;.</description><keys>(2nd) [LIST] MATH 4:median(</keys></token><token id="randM(" chars="randM("><syntax>randM(&lt;rows&gt;,&lt;columns&gt;)</syntax><description>Returns a random matrix of &lt;rows&gt; rows and &lt;columns&gt; columns.</description><keys>(2nd) [MATRX] MATH 6:randM(</keys></token><token id="mean(" chars="mean("><syntax>mean(&lt;list&gt;{,&lt;freqlist&gt;})</syntax><description>Returns the mean of &lt;list&gt; with frequency &lt;freqlist&gt;.</description><keys>(2nd) [LIST] MATH 3:mean(</keys></token><token id="solve(" chars="solve("><syntax>solve(&lt;expression&gt;,&lt;variable&gt;,&lt;guess&gt;{,&lt;bounds&gt;})</syntax><description>Solves &lt;expression&gt; for &lt;variable&gt;, given an initial guess &lt;guess&gt; and lower and upper bounds in two-element list &lt;bounds&gt; within which the solution is sought.</description><keys>(MATH) 0:solve(</keys></token><token id="seq(" chars="seq("><syntax>seq(&lt;expression&gt;,&lt;variable&gt;,&lt;begin&gt;,&lt;end&gt;{,&lt;increment&gt;})</syntax><description>Returns list created by evaluating &lt;expression&gt; with regard to &lt;variable&gt;, from &lt;begin&gt; to &lt;end&gt; by &lt;increment&gt; (defaulting to 1).</description><keys>(2nd) [LIST] OPS 5:seq(</keys></token><token id="fnInt(" chars="fnInt("><syntax>fnInt(&lt;expression&gt;,&lt;variable&gt;,&lt;lower&gt;,&lt;upper&gt;{,&lt;tolerance&gt;})</syntax><description>Returns the function integral of &lt;expression&gt; with respect to &lt;variable&gt;, between &lt;lower&gt; and &lt;upper&gt;, with specified &lt;tolerance&gt; (defaulting to 0.00001).</description><keys>(MATH) MATH 9:fnInt(</keys><axe:syntax>fnInt(&lt;label&gt;,&lt;freq&gt;)</axe:syntax><axe:description>Sets up the routine at &lt;label&gt; as an interrupt, executed at frequency &lt;freq&gt;, which should be an even number between 0 (fastest) and 6 (slowest).</axe:description><axe:size/><axe:time/></token><token id="nDeriv(" chars="nDeriv("><syntax>nDeriv(&lt;expression&gt;,&lt;variable&gt;,&lt;value&gt;{,&lt;h&gt;})</syntax><description>Returns approximate numerical derivative of &lt;expression&gt; with respect to &lt;variable&gt; at &lt;value&gt;, with specified step size &lt;h&gt; (defaulting to 0.001).</description><keys>(MATH) MATH 8:nDeriv(</keys></token><token/><token id="fMin(" chars="fMin("><syntax>fMax(&lt;expression&gt;,&lt;variable&gt;,&lt;lower&gt;,&lt;upper&gt;{,&lt;tolerance&gt;})</syntax><description>Returns the value of &lt;variable&gt; where the local minimum of &lt;expression&gt; occurs, between &lt;lower&gt; and &lt;upper&gt;, with specified &lt;tolerance&gt; (defaulting to 0.00001).</description><keys>(MATH) MATH 6:fMin(</keys></token><token id="fMax(" chars="fMax("><syntax>fMax(&lt;expression&gt;,&lt;variable&gt;,&lt;lower&gt;,&lt;upper&gt;{,&lt;tolerance&gt;})</syntax><description>Returns the value of &lt;variable&gt; where the local maximum of &lt;expression&gt; occurs, between &lt;lower&gt; and &lt;upper&gt;, with specified &lt;tolerance&gt; (defaulting to 0.00001).</description><keys>(MATH) MATH 7:fMax(</keys></token><token id=" " chars=" "><syntax/><description/><keys>(ALPHA) [ ]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&quot;" chars="&quot;"><syntax>&lt;degrees&gt;°&lt;minutes&gt;'&lt;seconds&gt;" OR "&lt;text&gt;"</syntax><description>Interprets &lt;seconds&gt; angle measurement as seconds or &lt;text&gt; as a string.</description><keys>(ALPHA) ["]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="," chars=","><syntax>,</syntax><description>A comma separates arguments in a variety of situations.</description><keys>(,)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="[i]" chars="\xd7"><syntax>𝑖</syntax><description>This is the imaginary number (square root of negative one). It also marks the current expression as complex, regardless of the current mode setting.</description><keys>(2nd) [𝑖]</keys><axe:syntax>Disp 𝑖</axe:syntax><axe:description>Adds a new line to the home screen.</axe:description><axe:size/><axe:time/><grammer:syntax>{&lt;value&gt;→}𝑖&lt;varname&gt;</grammer:syntax><grammer:description>Gets or sets the value of an EOS (TI-BASIC) variable.</grammer:description></token><token id="!" chars="!"><syntax>&lt;value&gt;!</syntax><description>Returns factorial of &lt;value&gt;.</description><keys>(MATH) PRB 4:!</keys><grammer:syntax/><grammer:description/></token><token id="CubicReg " chars="CubicReg "><syntax>CubicReg {&lt;regequ&gt;} OR CubicReg &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a cubic regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 6:CubicReg</keys></token><token id="QuartReg " chars="QuartReg "><syntax>QuartReg {&lt;regequ&gt;} OR QuartReg &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a quartic regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 7:QuartReg</keys></token><token id="0" chars="0"><syntax/><description/><keys>(0)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="1" chars="1"><syntax/><description/><keys>(1)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="2" chars="2"><syntax/><description/><keys>(2)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="3" chars="3"><syntax/><description/><keys>(3)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="4" chars="4"><syntax/><description/><keys>(4)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="5" chars="5"><syntax/><description/><keys>(5)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="6" chars="6"><syntax/><description/><keys>(6)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="7" chars="7"><syntax/><description/><keys>(7)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="8" chars="8"><syntax>8</syntax><description>The number 8.</description><keys>(8)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="9" chars="9"><syntax/><description/><keys>(9)</keys><axe:syntax/><axe:description>The number.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="." chars="."><syntax>.</syntax><description>Decimal point. It can be placed within or at either end of a sequence of digits.</description><keys>(.)</keys><axe:syntax/><axe:description/><grammer:syntax/><grammer:description/></token><token id="|E" chars="\x1b"><syntax>[&lt;value&gt;]ᴇ&lt;exponent&gt;</syntax><description>Returns &lt;value&gt; times 10 to the &lt;exponent&gt;. &lt;value&gt; can be a number, list, or matrix.</description><keys>(2nd) [EE]</keys><axe:syntax>ᴇ&lt;hex&gt;</axe:syntax><axe:description>Interprets &lt;hex&gt; as an integer in hexadecimal notation.</axe:description><axe:size/><axe:time/><grammer:syntax>ᴇ&lt;binary&gt;</grammer:syntax><grammer:description>Interprets &lt;binary&gt; as binary digits.</grammer:description></token><token id=" or " chars=" or "><syntax>&lt;valueA&gt; or &lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; or &lt;valueB&gt; is not zero and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers, expressions, or lists.</description><keys>(2nd) [TEST] LOGIC 2:or</keys><axe:syntax>&lt;valueA&gt; or &lt;valueB&gt;</axe:syntax><axe:description>Returns the bitwise OR of the lower 8 bits of the two numbers.</axe:description><axe:size/><axe:time/></token><token id=" xor " chars=" xor "><syntax>&lt;valueA&gt; xor &lt;valueB&gt;</syntax><description>Returns 1 if exactly one of &lt;valueA&gt; and &lt;valueB&gt; is not zero and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers, expressions, or lists.</description><keys>(2nd) [TEST] LOGIC 3:xor</keys><axe:syntax>&lt;valueA&gt; xor &lt;valueB&gt;</axe:syntax><axe:description>Returns the bitwise XOR of the lower 8 bits of the two numbers.</axe:description><axe:size/><axe:time/></token><token id=":" chars=":"><syntax>&lt;exp&gt;:&lt;exp&gt;</syntax><description>Alternative to newline (often used to separate expressions on the home screen).</description><keys>(ALPHA) [:]</keys><axe:syntax/><axe:description/><grammer:syntax/><grammer:description/></token><token id="&#10;" chars="\xd6"><syntax/><description/><keys>(ENTER)</keys></token><token id=" and " chars=" and "><syntax>&lt;valueA&gt; and &lt;valueB&gt;</syntax><description>Returns 1 if both &lt;valueA&gt; and &lt;valueB&gt; are not zero and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers, expressions, or lists.</description><keys>(2nd) [TEST] LOGIC 1:and</keys><axe:syntax>&lt;valueA&gt; and &lt;valueB&gt;</axe:syntax><axe:description>Returns the absolute value of &lt;expression&gt;.</axe:description><axe:size>&lt;valueB&gt; is &gt;&gt;    0 (mod 256): 2       255 (mod 256): 0    Other integer: 4    Variable: 7    Expression: 5</axe:size><axe:time>&lt;valueB&gt; is &gt;&gt; 0 (mod 256): 7 255 (mod 256): 0 Other integer: 15 Variable: 32 Expression: 33</axe:time></token><token id="A" chars="A"><syntax/><description/><keys>(ALPHA) [A]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>A</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="B" chars="B"><syntax/><description/><keys>(ALPHA) [B]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>B</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="C" chars="C"><syntax/><description/><keys>(ALPHA) [C]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>C</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="D" chars="D"><syntax>jkhkjhk</syntax><description/><keys>(ALPHA) [D]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>D</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="E" chars="E"><syntax/><description/><keys>(ALPHA) [E]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>E</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="F" chars="F"><syntax/><description/><keys>(ALPHA) [F]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>F</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="G" chars="G"><syntax/><description/><keys>(ALPHA) [G]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>G</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="H" chars="H"><syntax/><description/><keys>(ALPHA) [H]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>H</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="I" chars="I"><syntax/><description/><keys>(ALPHA) [I]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>I</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="J" chars="J"><syntax/><description/><keys>(ALPHA) [J]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>J</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="K" chars="K"><syntax/><description/><keys>(ALPHA) [K]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>K</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="L" chars="L"><syntax/><description/><keys>(ALPHA) [L]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>L</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="M" chars="M"><syntax/><description/><keys>(ALPHA) [M]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>M</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="N" chars="N"><syntax/><description/><keys>(ALPHA) [N]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>N</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="O" chars="O"><syntax/><description/><keys>(ALPHA) [O]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>O</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="P" chars="P"><syntax/><description/><keys>(ALPHA) [P]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>P</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="Q" chars="Q"><syntax/><description/><keys>(ALPHA) [Q]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>Q</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="R" chars="R"><syntax/><description/><keys>(ALPHA) [R]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>R</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="S" chars="S"><syntax/><description/><keys>(ALPHA) [S]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>S</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="T" chars="T"><syntax/><description/><keys>(ALPHA) [T]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>T</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="U" chars="U"><syntax/><description/><keys>(ALPHA) [U]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>U</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="V" chars="V"><syntax/><description/><keys>(ALPHA) [V]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>V</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="W" chars="W"><syntax/><description/><keys>(ALPHA) [W]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>W</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="X" chars="X"><syntax/><description/><keys>(ALPHA) [X]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>X</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="Y" chars="Y"><syntax/><description/><keys>(ALPHA) [Y]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>Y</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="Z" chars="Z"><syntax/><description/><keys>(ALPHA) [Z]</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax>Z</grammer:syntax><grammer:description>This is a pointer var. It holds a 16-bit integer, suitable for holding addresses and numbers.</grammer:description></token><token id="theta" chars="["><syntax/><description/><keys>(ALPHA) [θ]</keys></token><table name="Matrices"><token id="[A]" chars="\xc1A]"><syntax>&lt;Matrix&gt;→[A]</syntax><description>Matrix A.</description><keys>(2nd) [MATRX] 1:[A]</keys></token><token id="[B]" chars="\xc1B]"><syntax>&lt;Matrix&gt;→[B]</syntax><description>Matrix B.</description><keys>(2nd) [MATRX] 2:[B]</keys></token><token id="[C]" chars="\xc1C]"><syntax>&lt;Matrix&gt;→[C]</syntax><description>Matrix C.</description><keys>(2nd) [MATRX] 3:[C]</keys></token><token id="[D]" chars="\xc1D]"><syntax>&lt;Matrix&gt;→[A]</syntax><description>Matrix D.</description><keys>(2nd) [MATRX] 4:[D]</keys></token><token id="[E]" chars="\xc1E]"><syntax/><description/><keys>(2nd) [MATRX] 5:[E]</keys></token><token id="[F]" chars="\xc1F]"><syntax/><description/><keys>(2nd) [MATRX] 6:[F]</keys></token><token id="[G]" chars="\xc1G]"><syntax/><description/><keys>(2nd) [MATRX] 7:[G]</keys></token><token id="[H]" chars="\xc1H]"><syntax/><description/><keys>(2nd) [MATRX] 8:[H]</keys></token><token id="[I]" chars="\xc1I]"><syntax/><description/><keys>(2nd) [MATRX] 9:[I]</keys></token><token id="[J]" chars="\xc1J]"><syntax/><description/><keys>(2nd) [MATRX] 0:[J]</keys></token></table><table name="Lists"><token id="L1" chars="L\x81"><syntax>&lt;List&gt;→L₁</syntax><description>List number 1.</description><keys>(2nd) [L₁]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="L2" chars="L\x82"><syntax>&lt;List&gt;→L₂</syntax><description>List number 2.</description><keys>(2nd) [L₂]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="L3" chars="L\x83"><syntax>&lt;List&gt;→L₃</syntax><description>List number 3.</description><keys>(2nd) [L₃]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="L4" chars="L\x84"><syntax>&lt;List&gt;→L₄</syntax><description>List number 4.</description><keys>(2nd) [L₄]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="L5" chars="L\x85"><syntax>&lt;List&gt;→L₅</syntax><description>List number 5.</description><keys>(2nd) [L₅]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="L6" chars="L\x86"><syntax>&lt;List&gt;→L₆</syntax><description>List number 6.</description><keys>(2nd) [L₆]</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token></table><table name="Equations"><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token id="Y1" chars="Y\x81"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 1:Y₁</keys></token><token id="Y2" chars="Y\x82"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 2:Y₂</keys></token><token id="Y3" chars="Y\x83"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 3:Y₃</keys></token><token id="Y4" chars="Y\x84"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 4:Y₄</keys></token><token id="Y5" chars="Y\x85"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 5:Y₅</keys></token><token id="Y6" chars="Y\x86"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 6:Y₆</keys></token><token id="Y7" chars="Y\x87"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 7:Y₇</keys></token><token id="Y8" chars="Y\x88"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 8:Y₈</keys></token><token id="Y9" chars="Y\x89"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 9:Y₉</keys></token><token id="Y0" chars="Y\x80"><syntax/><description/><keys>(VARS) Y-VARS 1:Function 0:Y₀</keys></token><token/><token/><token/><token/><token/><token/><token id="X1T" chars="X\x81\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 1:X₁ᴛ</keys></token><token id="Y1T" chars="Y\x81\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 2:Y₁ᴛ</keys></token><token id="X2T" chars="X\x82\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 3:X₂ᴛ</keys></token><token id="Y2T" chars="Y\x82\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 4:Y₂ᴛ</keys></token><token id="X3T" chars="X\x83\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 5:X₃ᴛ</keys></token><token id="Y3T" chars="Y\x83\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 6:Y₃ᴛ</keys></token><token id="X4T" chars="X\x84\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 7:X₄ᴛ</keys></token><token id="Y4T" chars="Y\x84\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 8:Y₄ᴛ</keys></token><token id="X5T" chars="X\x85\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 9:X₅ᴛ</keys></token><token id="Y5T" chars="Y\x85\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric 0:Y₅ᴛ</keys></token><token id="X6T" chars="X\x86\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric A:X₆ᴛ</keys></token><token id="Y6T" chars="Y\x86\x0d"><syntax/><description/><keys>(VARS) Y-VARS 2:Parametric B:Y₆ᴛ</keys></token><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token id="r1" chars="r\x81"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 1:r₁</keys></token><token id="r2" chars="r\x82"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 2:r₂</keys></token><token id="r3" chars="r\x83"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 3:r₃</keys></token><token id="r4" chars="r\x84"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 4:r₄</keys></token><token id="r5" chars="r\x85"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 5:r₅</keys></token><token id="r6" chars="r\x86"><syntax/><description/><keys>(VARS) Y-VARS 3:Polar 6:r₆</keys></token><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token/><token id="|u" chars="\x02"><syntax>d</syntax><description/><keys>(2nd) [u]</keys></token><token id="|v" chars="\x03"><syntax/><description/><keys>(2nd) [v]</keys></token><token id="|w" chars="\x04"><syntax/><description/><keys>(2nd) [w]</keys></token></table><token id="prgm" chars="prgm"><syntax>prgm&lt;name&gt;</syntax><description>Executes the program &lt;name&gt;.</description><keys>(PRGM) CTL D:prgm</keys><axe:syntax>prgm&lt;name&gt;</axe:syntax><axe:description>Imports the code of program &lt;name&gt; at the current location.</axe:description><axe:size/><axe:time/><grammer:syntax>prgm&lt;pointer&gt;</grammer:syntax><grammer:description>Executes code at &lt;pointer&gt; as a subroutine.</grammer:description></token><table name="Pictures"><token id="Pic1" chars="Pic1"><syntax/><description>One of the pictures a TI-Calculator can hold</description><keys>(VARS) VARS 4:Picture 1:Pic1</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic2" chars="Pic2"><syntax/><description/><keys>(VARS) VARS 4:Picture 2:Pic2</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic3" chars="Pic3"><syntax/><description/><keys>(VARS) VARS 4:Picture 3:Pic3</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic4" chars="Pic4"><syntax/><description/><keys>(VARS) VARS 4:Picture 4:Pic4</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic5" chars="Pic5"><syntax/><description/><keys>(VARS) VARS 4:Picture 5:Pic5</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic6" chars="Pic6"><syntax/><description>A</description><keys>(VARS) VARS 4:Picture 6:Pic6</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic7" chars="Pic7"><syntax/><description/><keys>(VARS) VARS 4:Picture 7:Pic7</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic8" chars="Pic8"><syntax/><description/><keys>(VARS) VARS 4:Picture 8:Pic8</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic9" chars="Pic9"><syntax/><description/><keys>(VARS) VARS 4:Picture 9:Pic9</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Pic0" chars="Pic0"><syntax/><description/><keys>(VARS) VARS 4:Picture 0:Pic0</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token></table><table name="Graph databases"><token id="GDB1" chars="GDB1"><syntax/><description/><keys>(VARS) VARS 3:GDB 1:GDB1</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB2" chars="GDB2"><syntax/><description/><keys>(VARS) VARS 3:GDB 2:GDB2</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB3" chars="GDB3"><syntax/><description/><keys>(VARS) VARS 3:GDB 3:GDB3</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB4" chars="GDB4"><syntax/><description/><keys>(VARS) VARS 3:GDB 4:GDB4</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB5" chars="GDB5"><syntax/><description/><keys>(VARS) VARS 3:GDB 5:GDB5</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB6" chars="GDB6"><syntax/><description/><keys>(VARS) VARS 3:GDB 6:GDB6</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB7" chars="GDB7"><syntax/><description/><keys>(VARS) VARS 3:GDB 7:GDB7</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB8" chars="GDB8"><syntax/><description/><keys>(VARS) VARS 3:GDB 8:GDB8</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB9" chars="GDB9"><syntax/><description/><keys>(VARS) VARS 3:GDB 9:GDB9</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="GDB0" chars="GDB0"><syntax/><description/><keys>(VARS) VARS 3:GDB 0:GDB0</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token></table><table name="Statistics tokens"><token/><token id="RegEq" chars="RegEq"><syntax/><description/><keys>(VARS) VARS 5:Statistics EQ 1:RegEQ</keys></token><token id="[n]" chars="n"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY 1:n</keys></token><token id="[xhat]" chars="\xcb"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY 2:ẋ</keys></token><token id="[Sigmax]" chars="\xc6x"><syntax>Σx</syntax><description>Sum of x-values. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) VARS 5:Statistics Σ 2:Σx</keys></token><token id="[Sigmax^2]" chars="\xc6x\x12"><syntax>Σx²</syntax><description>Sum of x-squared values. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) VARS 5:Statistics Σ 2:Σx²</keys></token><token id="[Sx]" chars="Sx"><syntax>Sx</syntax><description>Sample standard deviation of x-values. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) VARS 5:Statistics XY 3:Sx</keys></token><token id="[sigmax]" chars="\xc7x"><syntax>σx</syntax><description>Population standard deviation of x-values. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) VARS 5:Statistics XY 4:σx</keys></token><token id="[minX]" chars="minX"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY 8:minX</keys></token><token id="[maxX]" chars="maxX"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY 9:maxX</keys></token><token id="[minY]" chars="minY"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY 0:minY</keys></token><token id="[maxY]" chars="maxY"><syntax/><description/><keys>(VARS) VARS 5:Statistics XY A:maxY</keys></token><token id="[yhat]" chars="\xcc"><syntax/><description/><keys/></token><token id="[Sigmay]" chars="\xc6y"><syntax/><description/><keys/></token><token id="[Sigmay^2]" chars="\xc6y\x12"><syntax/><description/><keys/></token><token id="[Sy]" chars="Sy"><syntax/><description/><keys/></token><token id="[sigmay]" chars="\xc7y"><syntax/><description/><keys/></token><token id="[Sigmaxy]" chars="\xc6xy"><syntax/><description/><keys/></token><token id="[r]" chars="r"><syntax>r</syntax><description>Correlation coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 7:r</keys></token><token id="[Med]" chars="[Med]"><syntax/><description/><keys/></token><token id="[Q1]" chars="Q1"><syntax/><description/><keys/></token><token id="[Q3]" chars="Q3"><syntax/><description/><keys/></token><token id="[a]" chars="a"><syntax>a</syntax><description>Regression coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 2:a</keys></token><token id="[b]" chars="b"><syntax>b</syntax><description>Regression coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 3:b</keys></token><token id="[c]" chars="c"><syntax>c</syntax><description>Regression coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 4:c</keys></token><token id="[d]" chars="d"><syntax>d</syntax><description>Regression coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 5:d</keys></token><token id="[e]" chars="e"><syntax>e</syntax><description>Regression coefficient. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 6:e</keys></token><token id="[x1]" chars="x\x81"><syntax/><description/><keys/></token><token id="[x2]" chars="x\x82"><syntax/><description/><keys/></token><token id="[x3]" chars="x\x83"><syntax/><description/><keys/></token><token id="[y1]" chars="y\x81"><syntax/><description/><keys/></token><token id="[y2]" chars="y\x82"><syntax/><description/><keys/></token><token id="[y3]" chars="y\x83"><syntax/><description/><keys/></token><token id="[recursiven]" chars="\x01"><syntax/><description/><keys/></token><token id="[p]" chars="p"><syntax/><description/><keys/></token><token id="[z]" chars="z"><syntax/><description/><keys/></token><token id="[t]" chars="t"><syntax/><description/><keys/></token><token id="[chi^2]" chars="\xd9\x12"><syntax/><description/><keys/></token><token id="[F]" chars="\xda"><syntax/><description/><keys/></token><token id="[df]" chars="df"><syntax/><description/><keys/></token><token id="[phat]" chars="\xd8"><syntax/><description/><keys/></token><token id="[phat1]" chars="\xd8\x81"><syntax/><description/><keys/></token><token id="[phat2]" chars="\xd8\x82"><syntax/><description/><keys/></token><token id="[xhat1]" chars="\xcb\x81"><syntax/><description/><keys/></token><token id="[Sx1]" chars="Sx\x81"><syntax/><description/><keys/></token><token id="[n1]" chars="n\x81"><syntax/><description/><keys/></token><token id="[xhat2]" chars="\xcb\x82"><syntax/><description/><keys/></token><token id="[Sx2]" chars="Sx\x82"><syntax/><description/><keys/></token><token id="[n2]" chars="n\x82"><syntax/><description/><keys/></token><token id="[Sxp]" chars="Sxp"><syntax/><description/><keys/></token><token id="[lower]" chars="lower"><syntax/><description/><keys/></token><token id="[upper]" chars="upper"><syntax/><description/><keys/></token><token id="[s]" chars="s"><syntax/><description/><keys/></token><token id="[r^2]" chars="r\x12"><syntax>r²</syntax><description>Coefficient of determination for statistics commands except QuadReg, CubicReg, and QuartReg. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics E) 5:Statistics EQ 8:r²</keys></token><token id="[R^2]" chars="R\x12"><syntax>R²</syntax><description>Coefficient of determination for QuadReg, CubicReg, and QuartReg. This variable is updated by statistics commands and cannot be stored to directly.</description><keys>(VARS) 5:Statistics EQ 9:R²</keys></token><token id="[factordf]" chars="[factordf]"><syntax/><description/><keys/></token><token id="[factorSS]" chars="[factorSS]"><syntax/><description/><keys/></token><token id="[factorMS]" chars="[factorMS]"><syntax/><description/><keys/></token><token id="[errordf]" chars="[errordf]"><syntax/><description/><keys/></token><token id="[errorSS]" chars="[errorSS]"><syntax/><description/><keys/></token><token id="[errorMS]" chars="[errorMS]"><syntax/><description/><keys/></token></table><table name="Window tokens"><token id="ZXscl" chars="ZXscl"><syntax/><description/><keys/></token><token id="ZYscl" chars="ZYscl"><syntax/><description/><keys/></token><token id="Xscl" chars="Xscl"><syntax/><description/><keys/></token><token id="Yscl" chars="Yscl"><syntax/><description/><keys/></token><token id="u(nMin)" chars="\x02(\x01Min)"><syntax/><description/><keys/></token><token id="v(nMin)" chars="\x03(\x01Min)"><syntax/><description/><keys/></token><token id="u(n-1)" chars="\x02(\x01-1)"><syntax/><description/><keys/></token><token id="v(n-1)" chars="\x03(\x01-1)"><syntax/><description/><keys/></token><token id="Zu(nMin)" chars="Z\x02(\x01Min)"><syntax/><description/><keys/></token><token id="Zv(nMin)" chars="Z\x03(\x01Min)"><syntax/><description/><keys/></token><token id="Xmin" chars="Xmin"><syntax/><description/><keys/></token><token id="Xmax" chars="Xmax"><syntax/><description/><keys/></token><token id="Ymin" chars="Ymin"><syntax/><description/><keys/></token><token id="Ymax" chars="Ymax"><syntax/><description/><keys/></token><token id="Tmin" chars="Tmin"><syntax/><description/><keys/></token><token id="Tmax" chars="Tmax"><syntax/><description/><keys/></token><token id="thetamin" chars="[min"><syntax/><description/><keys/></token><token id="thetamax" chars="[max"><syntax/><description/><keys/></token><token id="ZXmin" chars="ZXmin"><syntax/><description/><keys/></token><token id="ZXmax" chars="ZXmax"><syntax/><description/><keys/></token><token id="ZYmin" chars="ZYmin"><syntax/><description/><keys/></token><token id="ZYmax" chars="ZYmax"><syntax/><description/><keys/></token><token id="Zthetamin" chars="Z[min"><syntax/><description/><keys/></token><token id="Zthetamax" chars="Z[max"><syntax/><description/><keys/></token><token id="ZTmin" chars="ZTmin"><syntax/><description/><keys/></token><token id="ZTmax" chars="ZTmax"><syntax/><description/><keys/></token><token id="TblStart" chars="TblStart"><syntax/><description/><keys/></token><token id="PlotStart" chars="PlotStart"><syntax/><description/><keys/></token><token id="ZPlotStart" chars="ZPlotStart"><syntax/><description/><keys/></token><token id="nMax" chars="\x01Max"><syntax/><description/><keys/></token><token id="ZnMax" chars="Z\x01Max"><syntax/><description/><keys/></token><token id="nMin" chars="\x01Min"><syntax/><description/><keys/></token><token id="ZnMin" chars="Z\x01Min"><syntax/><description/><keys/></token><token id="DeltaTbl" chars="\xbeTbl"><syntax/><description/><keys/></token><token id="Tstep" chars="Tstep"><syntax/><description/><keys/></token><token id="thetastep" chars="[step"><syntax/><description/><keys/></token><token id="ZTstep" chars="ZTstep"><syntax/><description/><keys/></token><token id="Zthetastep" chars="Z[step"><syntax/><description/><keys/></token><token id="DeltaX" chars="\xbeX"><syntax/><description/><keys/></token><token id="DeltaY" chars="\xbeY"><syntax/><description/><keys/></token><token id="XFact" chars="XFact"><syntax/><description/><keys/></token><token id="YFact" chars="YFact"><syntax/><description/><keys/></token><token id="TblInput" chars="TblInput"><syntax/><description/><keys/></token><token id="|N" chars="\xdd"><syntax>𝗡</syntax><description>Total number of payments.</description><keys>(APPS) 1:Finance VARS 1:𝗡</keys></token><token id="I%" chars="I%"><syntax>I%</syntax><description>Annual interest rate.</description><keys>(APPS) 1:Finance VARS 2:I%</keys></token><token id="PV" chars="PV"><syntax>PV</syntax><description>Present value.</description><keys>(APPS) 1:Finance VARS 3:PV</keys></token><token id="PMT" chars="PMT"><syntax>PMT</syntax><description>Payment amount.</description><keys>(APPS) 1:Finance VARS 4:PMT</keys></token><token id="FV" chars="FV"><syntax>FV</syntax><description>Future value.</description><keys>(APPS) 1:Finance VARS 5:FV</keys></token><token id="P/Y" chars="P/Y"><syntax>P/Y</syntax><description>Number of payment periods per year.</description><keys>(APPS) 1:Finance VARS 6:P/Y</keys></token><token id="C/Y" chars="C/Y"><syntax>C/Y</syntax><description>Number of compounding periods per year.</description><keys>(APPS) 1:Finance VARS 7:C/Y</keys></token><token id="w(nMin)" chars="\x04(\x01Min)"><syntax/><description/><keys/></token><token id="Zw(nMin)" chars="Z\x04(\x01Min)"><syntax/><description/><keys/></token><token id="PlotStep" chars="PlotStep"><syntax/><description/><keys/></token><token id="ZPlotStep" chars="ZPlotStep"><syntax/><description/><keys/></token><token id="Xres" chars="Xres"><syntax/><description/><keys/></token><token id="ZXres" chars="ZXres"><syntax/><description/><keys/></token></table><token id="Radian" chars="Radian"><syntax>Radian</syntax><description>Sets radian angle mode.</description><keys>(MODE) Radian</keys></token><token id="Degree" chars="Degree"><syntax>Degree</syntax><description>Sets degree angle mode.</description><keys>(MODE) Degree</keys></token><token id="Normal" chars="Normal"><syntax>Normal</syntax><description>Sets normal display mode.</description><keys>(MODE) Normal</keys><axe:syntax>Normal</axe:syntax><axe:description>Disables full speed (15 MHz) mode on calculators that support it.</axe:description><axe:size/><axe:time/></token><token id="Sci" chars="Sci"><syntax>Sci</syntax><description>Sets scientific notation display mode.</description><keys>(MODE) Sci</keys></token><token id="Eng" chars="Eng"><syntax>Eng</syntax><description>Sets engineering display mode.</description><keys>(MODE) Eng</keys></token><token id="Float" chars="Float"><syntax>Float</syntax><description>Sets floating decimal mode.</description><keys>(MODE) Float</keys></token><token id="=" chars="="><syntax>&lt;valueA&gt;=&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is equal to &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, lists, or matrices.</description><keys>(2nd) [TEST] TEST 1:=</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&lt;" chars="&lt;"><syntax>&lt;valueA&gt;&lt;&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is less than &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, or lists.</description><keys>(2nd) [TEST] TEST 5:&lt;</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&gt;" chars="&gt;"><syntax>&lt;valueA&gt;&gt;&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is greater than &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, or lists.</description><keys>(2nd) [TEST] TEST 3:&gt;</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&lt;=" chars="\x17"><syntax>&lt;valueA&gt;≤&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is less than or equal to &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, or lists.</description><keys>(2nd) [TEST] TEST 6:≤</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&gt;=" chars="\x19"><syntax>&lt;valueA&gt;≥&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is greater than or equal to &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, or lists.</description><keys>(2nd) [TEST] TEST 4:≥</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="!=" chars="\x18"><syntax>&lt;valueA&gt;≠&lt;valueB&gt;</syntax><description>Returns 1 if &lt;valueA&gt; is not equal to &lt;valueB&gt; and 0 otherwise. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, lists, or matrices.</description><keys>(2nd) [TEST] TEST 2:≠</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="+" chars="+"><syntax>&lt;value1&gt;+&lt;value2&gt;</syntax><description>Returns &lt;valueA&gt; plus &lt;valueB&gt;, or the concatenation of two non-empty strings &lt;valueA&gt; and &lt;valueB&gt;. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, lists, matrices, or strings.</description><keys>(+)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="-" chars="-"><syntax>&lt;value1&gt;–&lt;value2&gt;</syntax><description>Returns &lt;valueA&gt; plus &lt;valueB&gt;. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, lists, or matrices.</description><keys>(–)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Ans" chars="Ans"><syntax>Ans</syntax><description>Returns the last answer.</description><keys>(2nd) [ANS]</keys><axe:syntax>{&lt;value&gt;→}Ans</axe:syntax><axe:description>Gets or sets the value of the OS's Ans variable as an integer. Throws an error if out of range.</axe:description><axe:size>7</axe:size><axe:time>83+: ~10,000  84+: ~10,500</axe:time><grammer:syntax>Ans</grammer:syntax><grammer:description>This returns the result of the previous line of code. Note that this is updated at every newline and not at colons.</grammer:description></token><token id="Fix " chars="Fix "><syntax>Fix &lt;number&gt;</syntax><description>Sets fixed-decimal mode for &lt;number&gt; decimal places.</description><keys>(MODE) 0123456789</keys><axe:syntax>Fix &lt;mode&gt;</axe:syntax><axe:description>Sets text mode &lt;mode&gt;, which should be a single digit. Modes 0 through 5 affect the behavior of Text: modes 0 and 1 set large font drawing off and on, modes 2 and 3 set inverse text mode off and on, and modes 4 and 5 determine whether text is drawn directly to the screen or to the buffer. Modes 6 and 7 determine whether the text drawn by Disp and Output( automatically scroll the screen. For all of these, the program should set the default mode (first listed) before quitting, as they affect operating system functions as well. Modes 8 and 9 turn lowercase input off and on.</axe:description><axe:size>4</axe:size><axe:time>23</axe:time><grammer:syntax/><grammer:description/></token><token id="Horiz" chars="Horiz"><syntax>Horiz</syntax><description>Sets horizontal split-screen mode.</description><keys>(MODE) Horiz</keys></token><token id="Full" chars="Full"><syntax>Full</syntax><description>Sets full screen mode.</description><keys>(MODE) Full</keys><axe:syntax>Full</axe:syntax><axe:description>Enables full speed (15 MHz) mode on calculators that support it. Does nothing on the plain TI-83 Plus.</axe:description><axe:size/><axe:time/><grammer:syntax>Full{&lt;mode&gt;}</grammer:syntax><grammer:description>Sets full speed (15 MHz) mode on calculators that support it, or &lt;mode&gt; speed (0 for normal, 1 for full, and 2 for toggle). Does nothing on the plain TI-83 Plus.</grammer:description></token><token id="Func" chars="Func"><syntax>Func</syntax><description>Sets function graphing mode.</description><keys>(MODE) Func</keys><grammer:syntax>Func&lt;pointer&gt;{,&lt;counter&gt;}</grammer:syntax><grammer:description>Executes the subroutine pointed to by &lt;pointer&gt; to be executed independently of the rest of the code at a mostly regular interval. &lt;counter&gt; defaults to 128; setting it higher will cause the subroutine to execute less often.</grammer:description></token><token id="Param" chars="Param"><syntax>Param</syntax><description>Sets parametric graphing mode.</description><keys>(MODE) Par</keys></token><token id="Polar" chars="Polar"><syntax>Polar</syntax><description>Sets polar graphing mode.</description><keys>(MODE) Pol</keys></token><token id="Seq" chars="Seq"><syntax>Seq</syntax><description>Sets sequence graphing mode.</description><keys>(MODE) Seq</keys></token><token id="IndpntAuto" chars="IndpntAuto"><syntax>IndpntAuto</syntax><description>Sets table to generate independent-variable values automatically.</description><keys>(2nd) [TBLSET] Indpnt: Auto</keys></token><token id="IndpntAsk" chars="IndpntAsk"><syntax>IndpntAsk</syntax><description>Sets table to ask for independent-variable values.</description><keys>(2nd) [TBLSET] Indpnt: Ask</keys></token><token id="DependAuto" chars="DependAuto"><syntax>DependAuto</syntax><description>Sets table to generate dependent-variable values automatically.</description><keys>(2nd) [TBLSET] Depend: Auto</keys></token><token id="DependAsk" chars="DependAsk"><syntax>DependAsk</syntax><description>Sets table to ask for dependent-variable values.</description><keys>(2nd) [TBLSET] Depend: Ask</keys></token><table name="Format tokens"><token id="Sequential" chars="Sequential"><syntax>Sequential</syntax><description>Sets mode to graph functions sequentially.</description><keys>(MODE) Sequential</keys></token><token id="Simul" chars="Simul"><syntax>Simul</syntax><description>Sets mode to graph functions simultaneously.</description><keys>(MODE) Simul</keys></token><token id="PolarGC" chars="PolarGC"><syntax>PolarGC</syntax><description>Sets polar graphing coordinates format.</description><keys>(2nd) [FORMAT] PolarGC</keys></token><token id="RectGC" chars="RectGC"><syntax>RectGC</syntax><description>Sets rectangular graphing coordinates format.</description><keys>(2nd) [FORMAT] RectGC</keys></token><token id="CoordOn" chars="CoordOn"><syntax>CoordOn</syntax><description>Turns on cursor coordinate value display.</description><keys>(2nd) [FORMAT] CoordOff</keys></token><token id="CoordOff" chars="CoordOff"><syntax>CoordOff</syntax><description>Turns off cursor coordinate value display.</description><keys>(2nd) [FORMAT] CoordOff</keys></token><token id="Connected" chars="Connected"><syntax>Connected</syntax><description>Sets connected plotting mode; resets all Y= editor graph-style settings to ╲.</description><keys>(MODE) Connected</keys></token><token id="Dot" chars="Dot"><syntax>Dot</syntax><description>Sets dot plotting mode; resets all Y= editor graph-style settings to ⋱.</description><keys>(MODE) Dot</keys></token><token id="AxesOn" chars="AxesOn"><syntax>AxesOn</syntax><description>Turns on the graph axes.</description><keys>(2nd) [FORMAT] AxesOn</keys></token><token id="AxesOff" chars="AxesOff"><syntax>AxesOff</syntax><description>Turns off the graph axes.</description><keys>(2nd) [FORMAT] AxesOff</keys></token><token id="GridOn" chars="GridOn"><syntax>GridOn</syntax><description>Turns on grid format.</description><keys>(2nd) [FORMAT] GridOn</keys></token><token id="GridOff" chars="GridOff"><syntax>GridOff</syntax><description>Turns off grid format.</description><keys>(2nd) [FORMAT] GridOff</keys></token><token id="LabelOn" chars="LabelOn"><syntax>LabelOn</syntax><description>Turns on axes labels.</description><keys>(2nd) [FORMAT] LabelOn</keys></token><token id="LabelOff" chars="LabelOff"><syntax>LabelOff</syntax><description>Turns off axes labels.</description><keys>(2nd) [FORMAT] LabelOff</keys></token><token id="Web" chars="Web"><syntax>Web</syntax><description>Sets sequence graphs to trace as webs.</description><keys>(2nd) [FORMAT] Web</keys></token><token id="Time" chars="Time"><syntax>Time</syntax><description>Sets sequence graphs to plot with respect to time.</description><keys>(2nd) [FORMAT] Time</keys></token><token id="uvAxes" chars="\x02\x03Axes"><syntax>uvAxes</syntax><description>Sets sequence graphs to plot u(n) on the x-axis and v(n) on the y-axis.</description><keys>(2nd) [FORMAT] uv</keys></token><token id="vwAxes" chars="\x03\x04Axes"><syntax>vwAxes</syntax><description>Sets sequence graphs to plot v(n) on the x-axis and w(n) on the y-axis.</description><keys>(2nd) [FORMAT] vw</keys></token><token id="uwAxes" chars="\x02\x04Axes"><syntax>uwAxes</syntax><description>Sets sequence graphs to plot u(n) on the x-axis and w(n) on the y-axis.</description><keys>(2nd) [FORMAT] uw</keys></token></table><token id="plotsquare" chars="\x0a"><syntax>&lt;plot&gt;(&lt;type&gt;,&lt;data&gt;,□)</syntax><description>Uses □ as the mark for a plot. See the plot commands for more information.</description><keys>(2nd) [STAT PLOT] MARK □</keys><axe:syntax>&lt;valueA&gt;□&lt;valueB&gt;</axe:syntax><axe:description>Returns the bitwise XOR of the all 16 bits of the two numbers.</axe:description><axe:size/><axe:time/></token><token id="plotcross" chars="\x0b"><syntax>&lt;plot&gt;(&lt;type&gt;,&lt;data&gt;,﹢)</syntax><description>Uses ﹢ as the mark for a plot. See the plot commands for more information.</description><keys>(2nd) [STAT PLOT] MARK ﹢</keys><axe:syntax>&lt;valueA&gt;﹢&lt;valueB&gt;</axe:syntax><axe:description>Returns the bitwise OR of the all 16 bits of the two numbers.</axe:description><axe:size/><axe:time/></token><token id="plotdot" chars="\x0c"><syntax>&lt;plot&gt;(&lt;type&gt;,&lt;data&gt;,·)</syntax><description>Uses · as the mark for a plot. See the plot commands for more information.</description><keys>(2nd) [STAT PLOT] MARK ·</keys><axe:syntax>&lt;valueA&gt;·&lt;valueB&gt;</axe:syntax><axe:description>Returns the bitwise AND of the all 16 bits of the two numbers.</axe:description><axe:size/><axe:time/></token><token id="*" chars="*"><syntax>&lt;valueA&gt;*&lt;valueB&gt;</syntax><description>Returns &lt;valueA&gt; times &lt;valueB&gt;. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, lists, or matrices.</description><keys>(*)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="/" chars="/"><syntax>&lt;valueA&gt;/&lt;valueB&gt;</syntax><description>Returns &lt;valueA&gt; divided by &lt;valueB&gt;. &lt;valueA&gt; and &lt;valueB&gt; can be real or complex numbers, expressions, or lists.</description><keys>(÷)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Trace" chars="Trace"><syntax>Trace</syntax><description>Displays the graph and enters trace mode.</description><keys>(TRACE)</keys></token><token id="ClrDraw" chars="ClrDraw"><syntax>ClrDraw</syntax><description>Clears the graph screen.</description><keys>(2nd) [DRAW] DRAW 1:ClrDraw</keys><axe:syntax>ClrDraw OR ClrDraw(&lt;buffer&gt;)</axe:syntax><axe:description>Erases the main buffer or specified buffer to white pixels.</axe:description><axe:syntax-r>ClrDrawʳ</axe:syntax-r><axe:description-r>Erases the back buffer to white pixels.</axe:description-r><axe:syntax-r-r>ClrDrawʳʳ</axe:syntax-r-r><axe:description-r-r>Erases both the front and back buffers to white pixels.</axe:description-r-r><axe:size/><axe:time/><grammer:syntax>ClrDraw{&lt;buffer&gt;}</grammer:syntax><grammer:description>Clears a 768-byte buffer, like the graph screen. &lt;buffer&gt; is an optional argument and lets you define a buffer to clear. Otherwise, the default draw buffer is cleared.</grammer:description></token><token id="ZStandard" chars="ZStandard"><syntax>ZStandard</syntax><description>Replots the functions immediately, updating the window variables to the default values (Xmin and Ymin at -10, Xmax and Ymax at 10, etc.).</description><keys>(ZOOM) ZOOM 6:ZStandard</keys></token><token id="ZTrig" chars="ZTrig"><syntax/><description/><keys/></token><token id="ZBox" chars="ZBox"><syntax>ZBox</syntax><description>Displays a graph, lets you draw a box that defines a new viewing window, and updates the window.</description><keys>(ZOOM) ZOOM 1:ZBox</keys></token><token id="Zoom In" chars="Zoom In"><syntax>Zoom In</syntax><description>Magnifies the part of the graph that surrounds the cursor location.</description><keys>(ZOOM) ZOOM 2:Zoom In</keys></token><token id="Zoom Out" chars="Zoom Out"><syntax>Zoom Out</syntax><description>Displays a greater portion of the graph, centered on the cursor location.</description><keys>(ZOOM) ZOOM 3:Zoom Out</keys></token><token id="ZSquare" chars="ZSquare"><syntax>ZSquare</syntax><description>Adjusts the X or Y window settings so that each pixel represents an equal width and height in the coordinate system, and updates the viewing window.</description><keys>(ZOOM) ZOOM 5:ZSquare</keys></token><token id="ZInteger" chars="ZInteger"><syntax>ZInteger</syntax><description>Adjusts the viewing window so that ∆X and ∆Y are 0.1 and Xscl and Yscl are 10.</description><keys>(ZOOM) ZOOM 8:ZInteger</keys></token><token id="ZPrevious" chars="ZPrevious"><syntax>ZPrevious</syntax><description>Replots the graph using the window variables of the graph that was displayed before you executed the last ZOOM instruction.</description><keys>(ZOOM) MEMORY 1:ZPrevious</keys></token><token id="ZDecimal" chars="ZDecimal"><syntax>ZDecimal</syntax><description>Adjusts the viewing window so that ∆X and ∆Y are 0.1, and displays the graph screen with the origin centered on the screen.</description><keys>(ZOOM) ZOOM 4:ZDecimal</keys></token><token id="ZoomStat" chars="ZoomStat"><syntax>ZoomStat</syntax><description>Redefines the viewing window so that all statistical data points are displayed.</description><keys>(ZOOM) ZOOM 9:ZoomStat</keys></token><token id="ZoomRcl" chars="ZoomRcl"><syntax>ZoomRcl</syntax><description>Graphs the selected functions in a user-defined viewing window.</description><keys>(ZOOM) MEMORY 3:ZoomRcl</keys></token><token id="PrintScreen" chars="PrintScreen"><syntax/><description>This token serves no purpose whatsoever.</description><keys/></token><token id="ZoomSto" chars="ZoomSto"><syntax>ZoomSto</syntax><description>Immediately stores the current viewing window.</description><keys>(ZOOM) MEMORY 2:ZoomSto</keys></token><token id="Text(" chars="Text("><syntax>Text({-1,}&lt;row&gt;,&lt;column&gt;,&lt;value1&gt;{,&lt;value2&gt;,...,&lt;valueN&gt;})</syntax><description>Writes &lt;values&gt; on graph beginning at pixel (&lt;row&gt;,&lt;column&gt;), where &lt;row&gt; is between 0 and 57 and &lt;column&gt; is between 0 and 94. If the first argument is negative one, large font is used.</description><keys>(2nd) [DRAW] 0:Text(</keys><axe:syntax>Text(&lt;x&gt;,&lt;y&gt;{,&lt;string&gt;}) OR Text(&lt;position&gt;)</axe:syntax><axe:description>Moves the cursor coordinates to (&lt;x&gt;,&lt;y&gt;), or to &lt;position&gt;, whose high byte should be the y-position and low byte should be the x-position. &lt;string&gt; is then displayed at the new location.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/><grammer:syntax-l/><grammer:description-l/><grammer:syntax-o/><grammer:description-o/><grammer:syntax-r/><grammer:description-r/></token><token id=" nPr " chars=" nPr "><syntax>&lt;valueA&gt; nPr &lt;valueB&gt;</syntax><description>Returns the number of permutations of &lt;valueA&gt; taken &lt;valueB&gt; at a time. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers or lists.</description><keys>(MATH) PRB 2:nPr</keys></token><token id=" nCr " chars=" nCr "><syntax>&lt;valueA&gt; nCr &lt;valueB&gt;</syntax><description>Returns the number of combinations of &lt;valueA&gt; taken &lt;valueB&gt; at a time. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers or lists.</description><keys>(MATH) PRB 3:nCr</keys></token><token id="FnOn " chars="FnOn "><syntax>FnOn {&lt;functionnumber1&gt;,...,&lt;functionnumberN&gt;}</syntax><description>Selects all equations or specified equations.</description><keys>(VARS) Y-VARS 4:On/Off ON/OFF 1:FnOn</keys><axe:syntax>FnOn</axe:syntax><axe:description>Enables interrupts.</axe:description><axe:size/><axe:time/></token><token id="FnOff " chars="FnOff "><syntax>FnOff {&lt;functionnumber1&gt;,...,&lt;functionnumberN&gt;}</syntax><description>Deselects all equations or specified equations.</description><keys>(VARS) Y-VARS 4:On/Off 2:FnOff</keys><axe:syntax>FnOff</axe:syntax><axe:description>Disables interrupts.</axe:description><axe:size/><axe:time/></token><token id="StorePic " chars="StorePic "><syntax>StorePic &lt;data&gt;</syntax><description>Stores contents on the graph in picture variable Pic&lt;number&gt;.</description><keys>(2nd) [DRAW] STO 1:StorePic</keys><axe:syntax>StorePic</axe:syntax><axe:description>Copies the main buffer to the back buffer.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="RecallPic " chars="RecallPic "><syntax>RecallPic &lt;number&gt;</syntax><description>Displays the graph and adds the picture stored in picture variable Pic&lt;number&gt;.</description><keys>(2nd) [DRAW] STO 2:RecallPic</keys><axe:syntax>{DispGraph}RecallPic {&lt;buffer1&gt;,&lt;buffer2&gt;}</axe:syntax><axe:description>Copies the back buffer or &lt;buffer2&gt; to the main buffer or &lt;buffer1&gt;, optionally drawing the original main buffer or &lt;buffer1&gt; to the screen at the same time.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="StoreGDB " chars="StoreGDB "><syntax>StoreGDB &lt;number&gt;</syntax><description>Stores the current equation variables and window settings in graph database variable GDB&lt;number&gt;.</description><keys>(2nd) [DRAW] STO 3:StoreGDB</keys><axe:syntax>StoreGDB</axe:syntax><axe:description>Copies the contents of the screen to the main buffer.</axe:description><axe:size/><axe:time/></token><token id="RecallGDB " chars="RecallGDB "><syntax>RecallGDB &lt;number&gt;</syntax><description>Restores all equation variables and window settings stored in the graph database variable GDB&lt;number&gt;.</description><keys>(2nd) [DRAW] STO 4:RecallGDB</keys></token><token id="Line(" chars="Line("><syntax>Line(&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;{,&lt;number&gt;})</syntax><description>Draws a line from (&lt;x1&gt;,&lt;y1&gt;) to (&lt;x2&gt;,&lt;y2&gt;). If &lt;number&gt; is provided and zero, the function erases the line instead.</description><keys>(2nd) [DRAW] DRAW 2:Line(</keys><axe:syntax>Line(&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>Draws a black line from point (&lt;x1&gt;,&lt;y1&gt;) to (&lt;x2&gt;,&lt;y2&gt;) on the main buffer or specified buffer.</axe:description><axe:syntax-r>Line(&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;{,&lt;buffer&gt;})ʳ</axe:syntax-r><axe:description-r>Draws a black line from point (&lt;x1&gt;,&lt;y1&gt;) to (&lt;x2&gt;,&lt;y2&gt;) on the back buffer.</axe:description-r><axe:size/><axe:time/><grammer:syntax>Line(&lt;x&gt;,&lt;y&gt;,&lt;height&gt;,&lt;width&gt;,&lt;mode&gt;{,&lt;buffer&gt;})</grammer:syntax><grammer:description>Draws a rectangle at (&lt;x&gt;,&lt;y&gt;) of a given &lt;width&gt; and &lt;height&gt; on buffer &lt;buffer&gt; using mode &lt;mode&gt; (0 for white, 1 for black, 2 for invert, 3 for a black border, 4 for a white border, 5 for an invert border, 6 for white with a black border, 7 for invert with a black border, 8 for black with a white border, 9 for invert with a white border, 10 for shifting the contents up, 11 for shifting the contents down, 14 for returning the number of pixels turned on in the region, and 15 for returning the number of pixels turned on in the perimeter).</grammer:description><grammer:syntax-l>Line('&lt;x1&gt;,&lt;y1&gt;,&lt;x2&gt;,&lt;y2&gt;,&lt;mode&gt;)</grammer:syntax-l><grammer:description-l>Draws a line from (x1,y1) to (x2,y2) using a given method (0=white, 1=black (default), 2=invert)</grammer:description-l></token><token id="Vertical " chars="Vertical "><syntax>Vertical &lt;x&gt;</syntax><description>Draws a vertical line at &lt;x&gt;.</description><keys>(2nd) [DRAW] DRAW 4:Vertical</keys><axe:syntax>Vertical+{(&lt;buffer&gt;)} OR Vertical–{(&lt;buffer&gt;)}</axe:syntax><axe:description>Shifts the main buffer or specified buffer down or up by one pixel. The row at the lagging edge is preserved.</axe:description><axe:syntax-r>Horizontal+ʳ OR Horizontal–ʳ</axe:syntax-r><axe:description-r>Shifts the back buffer down or up by one pixel. The row at the lagging edge is preserved.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pt-On(" chars="Pt-On("><syntax>Pt-On(&lt;x&gt;,&lt;y&gt;{,&lt;mark&gt;})</syntax><description>Draws a point at (&lt;x&gt;,&lt;y&gt;) using mark &lt;mark&gt;.</description><keys>(2nd) [DRAW] POINTS 1:Pt-On(</keys><axe:syntax>Pt-On(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The 8-by-8 sprite pointed to is drawn at (&lt;x&gt;,&lt;y&gt;) to the main buffer or specified buffer. Does not clear the area behind it.</axe:description><axe:syntax-r>Pt-On(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;)ʳ</axe:syntax-r><axe:description-r>The 8-by-8 sprite pointed to is drawn at (&lt;x&gt;,&lt;y&gt;) to the back buffer. Does not clear the area behind it.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pt-Off(" chars="Pt-Off("><syntax>Pt-Off(&lt;x&gt;,&lt;y&gt;{,&lt;mark&gt;})</syntax><description>Erases a point at (&lt;x&gt;,&lt;y&gt;) using mark &lt;mark&gt;.</description><keys>(2nd) [DRAW] POINTS 2:Pt-Off(</keys><axe:syntax>Pt-Off(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The 8-by-8 sprite pointed to is drawn at (&lt;x&gt;,&lt;y&gt;) to the main buffer or specified buffer, but clears the area behind it first.</axe:description><axe:syntax-r>Pt-Off(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;)ʳ</axe:syntax-r><axe:description-r>The 8-by-8 sprite pointed to is drawn at (&lt;x&gt;,&lt;y&gt;) to the back buffer, but clears the area behind it first.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pt-Change(" chars="Pt-Change("><syntax>Pt-Change(&lt;x&gt;,&lt;y&gt;)</syntax><description>Reverses a point at (&lt;x&gt;,&lt;y&gt;).</description><keys>(2nd) [DRAW] POINTS 3:Pt-Change(</keys><axe:syntax>Pt-Change(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The 8-by-8 sprite pointed to inverts its pixels at (&lt;x&gt;,&lt;y&gt;) to the main buffer specified buffer. Does not clear the area behind it.</axe:description><axe:syntax-r>Pt-Change(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;)ʳ</axe:syntax-r><axe:description-r>The 8-by-8 sprite pointed to inverts its pixels at (&lt;x&gt;,&lt;y&gt;) to the back buffer. Does not clear the area behind it.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pxl-On(" chars="Pxl-On("><syntax>Pxl-On(&lt;row&gt;,&lt;column&gt;)</syntax><description>Draws pixel at row &lt;row&gt; and column &lt;column&gt;; &lt;row&gt; is between 0 and 62 and &lt;column&gt; is between 0 and 94.</description><keys>(2nd) [DRAW] POINTS 4:Pxl-On(</keys><axe:syntax>Pxl-On(&lt;x&gt;,&lt;y&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The pixel at (&lt;x&gt;,&lt;y&gt;) becomes black on the main buffer or specified buffer.</axe:description><axe:syntax-r>Pxl-On(&lt;x&gt;,&lt;y&gt;)ʳ</axe:syntax-r><axe:description-r>The pixel at (&lt;x&gt;,&lt;y&gt;) becomes black on the back buffer.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pxl-Off(" chars="Pxl-Off("><syntax>Pxl-Off(&lt;row&gt;,&lt;column&gt;)</syntax><description>Erases pixel at row &lt;row&gt; and column &lt;column&gt;; &lt;row&gt; is between 0 and 62 and &lt;column&gt; is between 0 and 94.</description><keys>(2nd) [DRAW] POINTS 5:Pxl-Off(</keys><axe:syntax>Pxl-Off(&lt;x&gt;,&lt;y&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The pixel at (&lt;x&gt;,&lt;y&gt;) becomes white on the main buffer or specified buffer.</axe:description><axe:syntax-r>Pxl-Off(&lt;x&gt;,&lt;y&gt;)ʳ</axe:syntax-r><axe:description-r>The pixel at (&lt;x&gt;,&lt;y&gt;) becomes white on the back buffer.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Pxl-Change(" chars="Pxl-Change("><syntax>Pxl-Change(&lt;row&gt;,&lt;column&gt;)</syntax><description>Reverses pixel at row &lt;row&gt; and column &lt;column&gt;; &lt;row&gt; is between 0 and 62 and &lt;column&gt; is between 0 and 94.</description><keys>(2nd) [DRAW] POINTS 6:Pxl-Change(</keys><axe:syntax>Pxl-Change(&lt;x&gt;,&lt;y&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>The pixel at (&lt;x&gt;,&lt;y&gt;) inverts color on the main buffer or specified buffer.</axe:description><axe:syntax-r>Pxl-Change(&lt;x&gt;,&lt;y&gt;)ʳ</axe:syntax-r><axe:description-r>The pixel at (&lt;x&gt;,&lt;y&gt;) inverts color on the back buffer.</axe:description-r><axe:size/><axe:time/><grammer:syntax>Pxl-Change(&lt;y&gt;,&lt;x&gt;{,&lt;buffer&gt;})</grammer:syntax><grammer:description>Toggles a pixel at (&lt;y&gt;,&lt;x&gt;). This returns the previous state of the pixel (0=off, 1=on).</grammer:description></token><token id="Shade(" chars="Shade("><syntax>Shade(&lt;lowerfunc&gt;,&lt;upperfunc&gt;{,&lt;xleft&gt;,&lt;xright&gt;{,&lt;pattern&gt;{,&lt;patres&gt;}}})</syntax><description>Draws &lt;lowerfunc&gt; and &lt;upperfunc&gt; in terms of X on the current graph and uses &lt;pattern&gt; and &lt;patres&gt; to shade the area bounded by &lt;lowerfunc&gt;, &lt;upperfunc&gt;, &lt;xleft&gt;, and &lt;xright&gt;.</description><keys>(2nd) [DRAW] DRAW 7:Shade(</keys><axe:syntax>Shade({&lt;contrast&gt;})</axe:syntax><axe:description>If &lt;contrast&gt; is provided, sets the display contrast to &lt;contrast&gt;, which should be between 0 and 63. If not, returns the original contrast of the display before the program was executed.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Circle(" chars="Circle("><syntax>Circle(&lt;x&gt;,&lt;y&gt;,&lt;radius&gt;{,&lt;list&gt;})</syntax><description>Draws a circle with center (&lt;x&gt;,&lt;y&gt;) and radius &lt;radius&gt;. If &lt;list&gt; is provided, it should be a complex list, and will enable fast circle drawing.</description><keys>(2nd) [DRAW] DRAW 9:Circle(</keys><axe:syntax>Circle(&lt;x&gt;,&lt;y&gt;,&lt;radius&gt;{,&lt;buffer&gt;})</axe:syntax><axe:description>Draws a circle with center (&lt;x&gt;,&lt;y&gt;) and &lt;radius&gt; on the main buffer or specified buffer.</axe:description><axe:syntax-r>Circle(&lt;x&gt;,&lt;y&gt;,&lt;radius&gt;)ʳ</axe:syntax-r><axe:description-r>Draws a circle with center (&lt;x&gt;,&lt;y&gt;) and &lt;radius&gt; on the back buffer</axe:description-r><axe:size/><axe:time/><grammer:syntax>Circle(&lt;y&gt;,&lt;x&gt;,&lt;radius&gt;{,&lt;mode&gt;{,&lt;pattern&gt;{,&lt;buffer&gt;}}})</grammer:syntax><grammer:description>Draws a circle with center (&lt;x&gt;,&lt;y&gt;) and radius &lt;radius&gt; on buffer &lt;buffer&gt; using &lt;mode&gt; (0 for black, 1 for white, and 2 for invert). If &lt;pattern&gt; is provided, it should be a one-byte (eight-bit) number where each 0 bit signifies that a pixel should be drawn, defaulting to 0.</grammer:description></token><token id="Horizontal " chars="Horizontal "><syntax>Horizontal &lt;y&gt;</syntax><description>Draws a horizontal line at &lt;y&gt;.</description><keys>(2nd) [DRAW] DRAW 3:Horizontal</keys><axe:syntax>Horizontal+{(&lt;buffer&gt;)} OR Horizontal–{(&lt;buffer&gt;)}</axe:syntax><axe:description>Shifts the main buffer or specified buffer right or left by one pixel. White pixels are shifted in.</axe:description><axe:syntax-r>Horizontal+ʳ OR Horizontal–ʳ</axe:syntax-r><axe:description-r>Shifts the back buffer right or left by one pixel. White pixels are shifted in.</axe:description-r><axe:size/><axe:time/><grammer:syntax>Horizontal &lt;y&gt;{,&lt;mode&gt;{,&lt;buffer&gt;}}</grammer:syntax><grammer:description>Draws a horizontal line at &lt;y&gt; on buffer &lt;buffer&gt; using &lt;mode&gt; (0 for black, 1 for white, and 2 for invert).</grammer:description></token><token id="Tangent(" axe:id="Bitmap(" chars="Tangent(" axe:chars="Bitmap("><syntax>Tangent(&lt;expression&gt;,&lt;value&gt;)</syntax><description>Draws a line tangent to function &lt;expression&gt; at x-value &lt;value&gt;.</description><keys>(2nd) [DRAW] DRAW 5:Tangent(</keys><axe:syntax>Bitmap(&lt;x&gt;,&lt;y&gt;,&lt;bitmap&gt;{,&lt;buffer&gt;{,&lt;mode&gt;}})</axe:syntax><axe:description>Draws a bitmap to (&lt;x&gt;,&lt;y&gt;) on the main buffer or specified buffer. The bitmap data should have, in order, height (1 byte), then width (1 byte), then the rows of the image zero-padded to the nearest byte. Uses Pt-On(-logic if &lt;mode&gt; is 0 or unspecified and Pt-Change( logic if &lt;mode&gt; is 1.</axe:description><axe:syntax-r>Bitmap(&lt;x&gt;,&lt;y&gt;,&lt;bmp&gt;)ʳ</axe:syntax-r><axe:description-r>Draws a bitmap to (&lt;x&gt;,&lt;y&gt;) on the back buffer. The bitmap data should have, in order, height (1 byte), then width (1 byte), then the rows of the image zero-padded to the nearest byte. Uses Pt-On(-logic.</axe:description-r><axe:size>Treat as 0 bytes</axe:size><axe:time>Treat as 0 cycles (actual time is time for writing to buffer)</axe:time><grammer:syntax/><grammer:description/></token><token id="DrawInv " chars="DrawInv "><syntax>DrawInv &lt;expression&gt;</syntax><description>Draws the inverse of &lt;expression&gt; by plotting x-values on the y-axis and y-values on the x-axis.</description><keys>(2nd) [DRAW] DRAW 8:DrawInv</keys><axe:syntax>DrawInv{(&lt;buffer&gt;)}</axe:syntax><axe:description>The pixels on the main buffer or specified buffer are inverted.</axe:description><axe:syntax-r>DrawInvʳ</axe:syntax-r><axe:description-r>The pixels on the back buffer are inverted.</axe:description-r><axe:size/><axe:time/></token><token id="DrawF " axe:id="Text " chars="DrawF " axe:chars="Text "><syntax>DrawF &lt;expression&gt;</syntax><description>Draws &lt;expression&gt; (in terms of X) on the graph.</description><keys>(2nd) [DRAW] DRAW 6:DrawF</keys><axe:syntax>Text &lt;string&gt; OR Text &lt;value&gt;▶&lt;mode&gt;</axe:syntax><axe:description>The string that is pointed to is displayed at the cursor position. The cursor moves with the string. See Fix for options.</axe:description><axe:size/><axe:time/></token><table name="Strings"><token id="Str1" chars="Str1"><syntax>&lt;String&gt;→Str1</syntax><description>String number 1.</description><keys>(VARS) VARS 7:Str 1:Str1</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str2" chars="Str2"><syntax>&lt;String&gt;→Str2</syntax><description>String number 2.</description><keys>(VARS) VARS 7:Str 2:Str2</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str3" chars="Str3"><syntax>&lt;String&gt;→Str3</syntax><description>String number 3.</description><keys>(VARS) VARS 7:Str 3:Str3</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str4" chars="Str4"><syntax>&lt;String&gt;→Str4</syntax><description>String number 4.</description><keys>(VARS) VARS 7:Str 4:Str4</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str5" chars="Str5"><syntax>&lt;String&gt;→Str5</syntax><description>String number 5.</description><keys>(VARS) VARS 7:Str 5:Str5</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str6" chars="Str6"><syntax>&lt;String&gt;→Str6</syntax><description>String number 6.</description><keys>(VARS) VARS 7:Str 6:Str6</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str7" chars="Str7"><syntax>&lt;String&gt;→Str7</syntax><description>String number 7.</description><keys>(VARS) VARS 7:Str 7:Str7</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str8" chars="Str8"><syntax>&lt;String&gt;→Str8</syntax><description>String number 8.</description><keys>(VARS) VARS 7:Str 8:Str8</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str9" chars="Str9"><syntax>&lt;String&gt;→Str9</syntax><description>String number 9.</description><keys>(VARS) VARS 7:Str 9:Str9</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Str0" chars="Str0"><syntax>&lt;String&gt;→Str0</syntax><description>String number 0.</description><keys>(VARS) VARS 7:Str 0:Str0</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token></table><token id="rand" chars="rand"><syntax>rand{(&lt;numtrials&gt;)}</syntax><description>Returns a random number between 0 and 1 for a specified number of trials &lt;numtrials&gt;.</description><keys>(MATH) PRB 1:rand</keys><axe:syntax>rand</axe:syntax><axe:description>Returns a random 16-bit number.</axe:description><axe:size/><axe:time/></token><token id="pi" chars="\xc4"><syntax>π</syntax><description>Return the number pi.</description><keys>(2nd) [π]</keys><axe:syntax>π&lt;binary&gt;</axe:syntax><axe:description>Interprets &lt;binary&gt; as an integer in binary notation.</axe:description><axe:size/><axe:time/><grammer:syntax>π&lt;hex&gt;</grammer:syntax><grammer:description>Interprets &lt;hex&gt; as hexadecimal digits.</grammer:description></token><token id="getKey" chars="getKey"><syntax>getKey</syntax><description>Returns the key code for the current keystroke, or 0, if no key is pressed. See http://clrhome.org/keypad/ for a list of keys and their keypress values.</description><keys>(PRGM) I/O 7:getKey</keys><axe:syntax>getKey{(&lt;keynum&gt;)}</axe:syntax><axe:description>If &lt;keynum&gt; is provided, returns 1 if the key is held down or 0 if not. Otherwise, returns the key code for the current keystroke, or 0, if no key is pressed. See http://clrhome.org/keypad/ for a list of keys and their keypress values.</axe:description><axe:syntax-r>getKeyʳ</axe:syntax-r><axe:description-r>Waits for the user to press a sequence of keys, including modifier keys such as (2nd) and (ALPHA).</axe:description-r><axe:size>getKey: 7 getKeyʳ: 6 getKeys: 3 getKey(KEY): 3 getKey(0): 5 getKey(41): 9</axe:size><axe:time>getKey: 3349*((EXP-1)%65536)+13*((reg_b-1)%256+1)+16</axe:time><grammer:syntax>getKey{(&lt;keycode&gt;)}</grammer:syntax><grammer:description>Returns the key code for the current keystroke, or 0, if no key is pressed. If &lt;keycode&gt; is provided, returns 1 if that key is held down and 0 otherwise. See http://clrhome.org/resources/keypad/ for a list of keys and their keypress values.</grammer:description></token><token id="'" chars="'"><syntax>&lt;degrees&gt;°&lt;minutes&gt;'{&lt;seconds&gt;"}</syntax><description>Interprets &lt;minutes&gt; angle measurement as minutes.</description><keys>(2nd) [ANGLE] ANGLE 2:'</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="?" chars="?"><syntax/><description>Has no function whatsoever, but can be used in a string.</description><keys>[alpha](-)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="~" chars="\x1a"><syntax>⁻&lt;value&gt;</syntax><description>Returns the negative of a real or complex number, expression, list, or matrix.</description><keys>((-))</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="int(" axe:id="sign{" chars="int(" axe:chars="sign{"><syntax>int(&lt;value&gt;)</syntax><description>Returns the largest integer less than or equal to a real or complex number, expression, list, or matrix.</description><keys>(MATH) NUM 5:int(</keys><axe:syntax>sign(&lt;pointer&gt;)</axe:syntax><axe:description>Returns the value pointed to as a signed byte ranging from -128 to 127.</axe:description><axe:size/><axe:time/><grammer:syntax>int(&lt;pointer&gt;,&lt;value&gt;)</grammer:syntax><grammer:description>Stores &lt;value&gt; to a pointer in RAM.</grammer:description></token><token id="abs(" chars="abs("><syntax>abs(&lt;value&gt;)</syntax><description>Returns the absolute value of a number, expression, list, or matrix.</description><keys>(MATH) NUM 1:abs(</keys><axe:syntax>abs(&lt;expression&gt;)</axe:syntax><axe:description>Returns the absolute value of &lt;expression&gt;.</axe:description><axe:size>10</axe:size><axe:time>&lt;expression&gt; negative: 29             &lt;expression&gt; nonnegative: 20</axe:time></token><token id="det(" axe:id="Buff(" chars="det(" axe:chars="Buff("><syntax>det(&lt;matrix&gt;)</syntax><description>Returns determinant of &lt;matrix&gt;.</description><keys>(2nd) [MATRX] MATH 1:det(</keys><axe:syntax>Buff(&lt;size&gt;{,&lt;const&gt;})</axe:syntax><axe:description>Creates a buffer that is &lt;size&gt; bytes large, filled with the byte &lt;const&gt; or with zero if unspecified.</axe:description><axe:size>Treat as 0 bytes, but is really &lt;size&gt; large</axe:size><axe:time>Treat as 0 cycles</axe:time></token><token id="identity(" axe:id="#Icon(" chars="identity(" axe:chars="#Icon("><syntax>identity(&lt;dimension&gt;)</syntax><description>Returns the identity matrix of &lt;dimension&gt; rows by &lt;dimension&gt; columns.</description><keys>(2nd) [MATRX] MATH 5:identity</keys><axe:syntax>#Icon(&lt;hex&gt;)</axe:syntax><axe:description>The compiler replaces the default icon of the executable when compiling for MirageOS or DoorsCS with the icon in &lt;hex&gt;, which should be 64 characters long.</axe:description><axe:size/><axe:time/></token><token id="dim(" chars="dim("><syntax>[&lt;length&gt;→]dim(&lt;listname)  OR  [&lt;dimensions&gt;→]dim(&lt;matrixname&gt;)</syntax><description>Returns or assigns the dimension of &lt;listname&gt; or &lt;matrixname&gt;. For a matrix, &lt;dimensions&gt; should be a two-element list whose first element is the number of rows and whose second element is the number of columns.</description><keys>(2nd) [LIST] OPS 3:dim(</keys></token><token id="sum(" chars="sum("><syntax>sum(&lt;list&gt;{,&lt;int1&gt;,&lt;int2&gt;})</syntax><description>Returns the sum of the elements of &lt;list&gt; (between elements &lt;int1&gt; and &lt;int2&gt;, counting from 1, if given).</description><keys/></token><token id="prod(" chars="prod("><syntax>prod(&lt;list&gt;{,&lt;start&gt;,&lt;end&gt;})</syntax><description>Returns product of &lt;list&gt; elements between &lt;start&gt; and &lt;end&gt;.</description><keys>(2nd) [LIST] MATH 6:prod(</keys></token><token id="not(" chars="not("><syntax>not(&lt;value&gt;)</syntax><description>Returns 1 if &lt;value&gt; is zero and 0 if not. &lt;value&gt; can be a real number, expression, or list.</description><keys>(2nd) [TEST] LOGIC 4:not(</keys><axe:syntax>not(&lt;value&gt;)</axe:syntax><axe:description>Returns the bitwise complement (one's complement) of the lower eight bits of &lt;value&gt;.</axe:description><axe:syntax-r>not(&lt;value&gt;)ʳ</axe:syntax-r><axe:description-r>Returns the bitwise complement (one's complement) of all sixteen bits of &lt;value&gt;.</axe:description-r><axe:size/><axe:time/></token><token id="iPart(" axe:id="nib{" chars="iPart(" axe:chars="nib{"><syntax>iPart(&lt;value&gt;)</syntax><description>Returns the integer part &lt;value&gt;.</description><keys>(MATH) NUM 3:iPart(</keys><axe:syntax>{&lt;value&gt;→}nib(&lt;index&gt;)</axe:syntax><axe:description>Gets or sets the &lt;index&gt; nibble in RAM. Since there are two nibbles in a byte, &lt;index&gt; should be twice as large as a pointer to the location.</axe:description><axe:syntax-r>nib(&lt;index&gt;)ʳ</axe:syntax-r><axe:description-r>Returns the value of the &lt;index&gt; nibble in the flash page of the executable when compiled as an application. Since there are two nibbles in a byte, &lt;index&gt; should be twice as large as a pointer to the location.</axe:description-r><axe:size/><axe:time/><grammer:syntax>iPart(&lt;pointer&gt;,&lt;value&gt;)</grammer:syntax><grammer:description>Stores a two-byte little-endian value &lt;value&gt; to a pointer in RAM.</grammer:description></token><token id="fPart(" axe:id="float{" chars="fPart(" axe:chars="float{"><syntax>fPart(&lt;value&gt;)</syntax><description>Returns the fractional part or parts of a real or complex number, expression, list, or matrix.</description><keys>(MATH) NUM 4:fPart(</keys><axe:syntax>{&lt;value&gt;→}float(&lt;pointer&gt;)</axe:syntax><axe:description>Gets or sets the nine-byte value starting at &lt;pointer&gt; as a floating-point number, into or from an integer.</axe:description><axe:size/><axe:time/></token><table name="Misc. tokens"><token id="npv(" chars="npv("><syntax>npv(&lt;rate&gt;,&lt;cf0&gt;,&lt;cflist&gt;{,&lt;cffreq&gt;})</syntax><description>Computes the sum of the present values for cash inflows and outflows.</description><keys>(APPS) 1:Finance CALC 7:npv(</keys></token><token id="irr(" chars="irr("><syntax>irr(&lt;cf0&gt;,&lt;cflist&gt;{,&lt;cffreq&gt;})</syntax><description/><keys/></token><token id="bal(" chars="bal("><syntax>bal(&lt;npmt&gt;{,&lt;roundvalue&gt;})</syntax><description>Computes the balance at &lt;npmt&gt; for an amortization schedule using stored values for PV, I%, and PMT and rounds the computation to&lt;br /&gt;&lt;roundvalue&gt;.</description><keys>(APPS) 1:Finance CALC 9:bal(</keys></token><token id="Sigmaprn(" chars="\xc6prn("><syntax>ΣPrn(&lt;pmt1&gt;,&lt;pmt2&gt;{,roundvalue})</syntax><description>Computes the sum, rounded to &lt;roundvalue&gt;, of the principal amount between &lt;pmt1&gt; and &lt;pmt2&gt; for an amortization schedule.</description><keys>(APPS) 1:Finance CALC 0:ΣPrn(</keys></token><token id="SigmaInt(" chars="\xc6Int("><syntax>ΣInt(&lt;pmt1&gt;,&lt;pmt2&gt;{,&lt;roundvalue&gt;})</syntax><description>Computes the sum, rounded to &lt;roundvalue&gt;, of the interest amount between &lt;pmt1&gt; and &lt;pmt2&gt; for an amortization schedule.</description><keys>(APPS) 1:Finance CALC A:ΣInt(</keys></token><token id="&gt;Nom(" chars="\x05Nom("><syntax>▶Nom(&lt;rate&gt;,&lt;periods&gt;)</syntax><description>Computes the nominal interest rate.</description><keys>(APPS) 1:Finance CALC B:▶Nom(</keys></token><token id="&gt;Eff(" chars="\x05Eff("><syntax>▶Eff(&lt;rate&gt;,&lt;periods&gt;)</syntax><description>Computes the effective interest rate.</description><keys>(APPS) 1:Finance CALC C:▶Eff(</keys></token><token id="dbd(" chars="dbd("><syntax>dbd(&lt;dateA&gt;,&lt;dateB&gt;)</syntax><description>Calculates the number of days between &lt;dateA&gt; and &lt;dateB&gt; using the actual-day-count method.</description><keys>(APPS) 1:Finance CALC D:dbd(</keys></token><token id="lcm(" chars="lcm("><syntax>lcm(&lt;valueA&gt;,&lt;valueB&gt;)</syntax><description>Returns the least common multiple of &lt;valueA&gt; and &lt;valueB&gt;, which can be real numbers or lists.</description><keys>(MATH) NUM 8:lcm(</keys></token><token id="gcd(" chars="gcd("><syntax>gcd(&lt;valueA&gt;,&lt;valueB&gt;)</syntax><description>Returns the greatest common divisor of &lt;valueA&gt; and &lt;valueB&gt;, which can be real numbers or lists.</description><keys>(MATH) NUM 9:gcd(</keys></token><token id="randInt(" chars="randInt("><syntax>randInt(&lt;lower&gt;,&lt;upper&gt;{,&lt;numtrials&gt;})</syntax><description>Returns a random integer within a range specified by &lt;lower&gt; and &lt;upper&gt; integer bounds for a specified number of trials &lt;numtrials&gt;.</description><keys>(MATH) PRB 5:randInt(</keys></token><token id="randBin(" chars="randBin("><syntax>randBin(&lt;numtrials&gt;,&lt;prob&gt;{,&lt;numsimulations&gt;})</syntax><description>Returns a random real number from a specified Binomial distribution for the specified number of simulations &lt;numsimulations&gt;.</description><keys>(MATH) PRB 7:randBin(</keys></token><token id="sub(" chars="sub("><syntax>sub(&lt;string&gt;,&lt;begin&gt;,&lt;length&gt;) OR sub(&lt;number&gt;)</syntax><description>Returns a string that is a subset of another string &lt;string&gt;, from &lt;begin&gt; (counting from 1) to &lt;length&gt; or &lt;number&gt; divided by 100.</description><keys>(2nd) [CATALOG] sub(</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="stdDev(" chars="stdDev("><syntax>stdDev(&lt;list&gt;{,&lt;freqlist&gt;})</syntax><description>Returns the standard deviation of the elements in &lt;list&gt; with frequency &lt;freqlist&gt;.</description><keys>(2nd) [LIST] MATH 7:stdDev(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="variance(" chars="variance("><syntax>variance(&lt;list&gt;{,&lt;freqlist&gt;})</syntax><description>Returns the variance of the elements in &lt;list&gt; with frequency &lt;freqlist&gt;.</description><keys>(2nd) [LIST] MATH 8:variance(</keys></token><token id="inString(" axe:id="inData(" chars="inString(" axe:chars="inData("><syntax>inString(&lt;string&gt;,&lt;substring&gt;{,&lt;start&gt;})</syntax><description>Returns the character position in &lt;string&gt; of the first character of &lt;substring&gt; beginning at &lt;start&gt; (defaulting to 1), or 0, if &lt;substring&gt; is not found in &lt;string&gt;</description><keys>(2nd) [CATALOG] inString(</keys><axe:syntax>inData(&lt;value&gt;,&lt;string&gt;)</axe:syntax><axe:description>Returns the character position in &lt;string&gt; of the byte &lt;value&gt; (counting from 1), or 0, if &lt;value&gt; is not found in &lt;string&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description>Duble-click to edit</grammer:description></token><token id="normalcdf(" chars="normalcdf("><syntax>normalcdf(&lt;lowerbound&gt;,&lt;upperbound&gt;{,&lt;μ&gt;,&lt;σ&gt;})</syntax><description>Computes the normal distribution probability between &lt;lowerbound&gt; and &lt;upperbound&gt; for the specified mean &lt;μ&gt; and standard deviation &lt;σ&gt; (defaulting to 0 and 1, respectively).</description><keys>(2nd) [DISTR] DISTR 2:normalcdf(</keys></token><token id="invNorm(" chars="invNorm("><syntax>invNorm(&lt;area&gt;{,&lt;μ&gt;,&lt;σ&gt;})</syntax><description>Returns the integer part of a real or complex number, expression, list, or matrix.</description><keys>(MATH) NUM 3:iPart(</keys></token><token id="tcdf(" chars="tcdf("><syntax>tcdf(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;df&gt;)</syntax><description>Computes the Student's t distribution probability between &lt;lowerbound&gt; and &lt;upperbound&gt; for the specified degrees of freedom &lt;df&gt;.</description><keys>(2nd) [DISTR] DISTR 5:tcdf(</keys></token><token id="chi^2cdf(" chars="\xd9\x12cdf("><syntax>χ²cdf(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;df&gt;)</syntax><description>Computes the χ² distribution probability between &lt;lowerbound&gt; and &lt;upperbound&gt; for the specified degrees of freedom &lt;df&gt;.</description><keys>(2nd) [DISTR] DISTR 7:χ²cdf(</keys></token><token id="Fcdf(" chars="\xdacdf("><syntax>Fcdf(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;numeratordf&gt;,&lt;denominatordf&gt;)</syntax><description>Computes the F distribution probability between &lt;lowerbound&gt; and &lt;upperbound&gt; for the specified &lt;numeratordf&gt; (degrees of freedom) and &lt;denominatordf&gt;.</description><keys>(2nd) [DISTR] DISTR 9:Fcdf(</keys></token><token id="binompdf(" chars="binompdf("><syntax>binompdf(&lt;numtrials&gt;,&lt;p&gt;{,&lt;x&gt;})</syntax><description>Computes a probability at &lt;x&gt; for the discrete binomial distribution with the specified &lt;numtrials&gt; and probability &lt;p&gt; of success on each trial.</description><keys>(2nd) [DISTR] DISTR 0:binompdf(</keys></token><token id="binomcdf(" chars="binomcdf("><syntax>binomcdf(&lt;numtrials&gt;,&lt;p&gt;{,&lt;x&gt;})</syntax><description>Computes a cumulative probability at &lt;x&gt; for the discrete binomial distribution with the specified &lt;numtrials&gt; and probability &lt;p&gt; of success on each trial.</description><keys>(2nd) [DISTR] DISTR A:binomcdf(</keys></token><token id="poissonpdf(" chars="poissonpdf("><syntax>poissonpdf(&lt;μ&gt;,&lt;x&gt;)</syntax><description>Computes a probability at &lt;x&gt; for the discrete Poisson distribution with the specified mean &lt;μ&gt;.</description><keys>(2nd) [DISTR] DISTR B:poissonpdf(</keys></token><token id="poissoncdf(" chars="poissoncdf("><syntax>poissoncdf(&lt;μ&gt;,&lt;x&gt;)</syntax><description>Computes a cumulative probability at &lt;x&gt; for the discrete Poisson distribution with specified mean &lt;μ&gt;.</description><keys>(2nd) [DISTR] DISTR C:poissoncdf(</keys></token><token id="geometpdf(" chars="geometpdf("><syntax>geometpdf(&lt;p&gt;, &lt;x&gt;)</syntax><description>Computes a probability at &lt;x&gt;, the number of the trial on which the first success occurs, for the discrete geometric distribution with the specified probability of success &lt;p&gt;.</description><keys>(2nd) [DISTR] DISTR D:geometpdf(</keys></token><token id="geometcdf(" chars="geometcdf("><syntax>geometcdf(&lt;p&gt;,&lt;x&gt;)</syntax><description>Computes a cumulative probability at &lt;x&gt;, the number of the trial on which the first success occurs, for the discrete geometric distribution with the specified probability of success &lt;p&gt;.</description><keys>(2nd) [DISTR] DISTR E:geometcdf(</keys></token><token id="normalpdf(" chars="normalpdf("><syntax>normalpdf(&lt;x&gt;{,&lt;μ&gt;,&lt;σ&gt;})</syntax><description>Computes the probability density function for the normal distribution at a specified x-value &lt;x&gt; for the specified mean &lt;μ&gt; and standard deviation &lt;σ&gt; (defaulting to 0 and 1, respectively).</description><keys>(2nd) [DISTR] DISTR 1:normalpdf(</keys></token><token id="tpdf(" chars="tpdf("><syntax>tpdf(&lt;x&gt;,&lt;df&gt;)</syntax><description>Computes the probability density function (pdf) for the Student's t distribution at a specified x-value &lt;x&gt; with specified degrees of freedom &lt;df&gt;.</description><keys>(2nd) [DISTR] DISTR 4:tpdf(</keys></token><token id="chi^2pdf(" chars="\xd9\x12pdf("><syntax>χ²pdf(&lt;x&gt;,&lt;df&gt;)</syntax><description>Computes the probability density function (pdf) for the χ² distribution at a specified &lt;x&gt; value for the specified degrees of freedom &lt;df&gt;.</description><keys>(2nd) [DISTR] DISTR 6:χ²pdf(</keys></token><token id="Fpdf(" chars="\xdapdf("><syntax>Fcdf(&lt;x&gt;,&lt;numeratordf&gt;,&lt;denominatordf&gt;)</syntax><description>Computes the probability density function (pdf) for the F distribution at a specified &lt;x&gt; value for the specified &lt;numeratordf&gt; (degrees of freedom) and &lt;denominatordf&gt;.</description><keys>(2nd) [DISTR] DISTR 8:Fpdf(</keys></token><token id="randNorm(" chars="randNorm("><syntax>randNorm(&lt;μ&gt;,&lt;σ&gt;{,&lt;numtrials&gt;})</syntax><description>Returns a random real number from a specified Normal distribution specified by mean &lt;μ&gt; and standard deviation &lt;σ&gt; for a specified number of trials &lt;numtrials&gt;.</description><keys>(MATH) PRB 6:randNorm(</keys></token><token id="tvm_Pmt" chars="tvm_Pmt"><syntax>tvm_FV{(&lt;n&gt;{,&lt;i&gt;{,&lt;pv&gt;{,&lt;fv&gt;{,&lt;py&gt;{,&lt;cy&gt;}}}}})}</syntax><description>Computes the amount of each payment.</description><keys>(APPS) 1:Finance CALC 6:tvm_Pmt</keys></token><token id="tvm_I%" chars="tvm_I%"><syntax>tvm_FV{(&lt;n&gt;{,&lt;pv&gt;{,&lt;pmt&gt;{,&lt;fv&gt;{,&lt;py&gt;{,&lt;cy&gt;}}}}})}</syntax><description>Computes the annual interest rate.</description><keys>(APPS) 1:Finance CALC 6:tvm_I%</keys></token><token id="tvm_PV" chars="tvm_PV"><syntax>tvm_FV{(&lt;n&gt;{,&lt;i&gt;{,&lt;pmt&gt;{,&lt;fv&gt;{,&lt;py&gt;{,&lt;cy&gt;}}}}})}</syntax><description>Computes the present value.</description><keys>(APPS) 1:Finance CALC 6:tvm_PV</keys></token><token id="tvm_N" chars="tvm_N"><syntax>tvm_FV{(&lt;i&gt;{,&lt;pv&gt;{,&lt;pmt&gt;{,&lt;fv&gt;{,&lt;py&gt;{,&lt;cy&gt;}}}}})}</syntax><description>Computes the number of payment periods.</description><keys>(APPS) 1:Finance CALC 6:tvm_N</keys></token><token id="tvm_FV" chars="tvm_FV"><syntax>tvm_FV{(&lt;n&gt;{,&lt;i&gt;{,&lt;pv&gt;{,&lt;pmt&gt;{,&lt;py&gt;{,&lt;cy&gt;}}}}})}</syntax><description>Computes the future value.</description><keys>(APPS) 1:Finance CALC 6:tvm_FV</keys></token><token id="conj(" axe:id="Copy(" chars="conj(" axe:chars="Copy("><syntax>conj(&lt;value&gt;)</syntax><description>Returns the complex conjugate of a complex number or list of complex numbers.</description><keys>(MATH) CPX 1:conj(</keys><axe:syntax>Copy(&lt;pointer1&gt;{,&lt;pointer2&gt;{,&lt;size&gt;}})</axe:syntax><axe:description>&lt;size&gt; (defaulting to 768) bytes starting at &lt;pointer1&gt; are copied to &lt;pointer2&gt; (defaulting to L₆) onwards.</axe:description><axe:syntax-r>Copy(&lt;pointer1&gt;,&lt;pointer2&gt;,&lt;size&gt;)ʳ</axe:syntax-r><axe:description-r>&lt;size&gt; bytes ending at &lt;pointer1&gt; are copied to &lt;pointer2&gt; moving backwards.</axe:description-r><axe:size/><axe:time/><grammer:syntax/><grammer:description/><grammer:syntax-l/><grammer:description-l/></token><token id="real(" axe:id="#Realloc(" chars="real(" axe:chars="#Realloc("><syntax>real(&lt;value&gt;)</syntax><description>Returns the real part of a complex number or list of complex numbers.</description><keys>(MATH) CPX 2:real(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="imag(" chars="imag("><syntax>imag(&lt;value&gt;)</syntax><description>Returns the imaginary (nonreal) part of a complex number or list of complex numbers.</description><keys>(MATH) CPX 3:imag(</keys></token><token id="angle(" chars="angle("><syntax>angle(&lt;value&gt;)</syntax><description>Returns the polar angle of a complex number or list of complex numbers.</description><keys>(MATH) CPX 4:angle(</keys></token><token id="cumSum(" chars="cumSum("><syntax>cumSum(&lt;value&gt;)</syntax><description>Returns a list of the cumulative sums of elements in list &lt;value&gt;, starting from the first element, or a matrix of the cumulative sums of matrix &lt;value&gt; elements, from top to bottom.</description><keys>(2nd) [LIST] OPS 6:cumSum(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="expr(" axe:id="Exch(" chars="expr(" axe:chars="Exch("><syntax>expr(&lt;string&gt;)</syntax><description>Converts &lt;string&gt; to an expression and executes it.</description><keys>(2nd) [CATALOG] expr(</keys><axe:syntax>Exch(&lt;pointer1&gt;,&lt;pointer2&gt;,&lt;size&gt;)</axe:syntax><axe:description>&lt;size&gt; bytes starting at &lt;pointer1&gt; are exchanged with &lt;size&gt; bytes starting at &lt;pointer2&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="length(" chars="length("><syntax>length(&lt;string&gt;)</syntax><description>Returns the number of characters in &lt;string&gt;.</description><keys>(2nd) [CATALOG] length(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/><grammer:syntax-l/><grammer:description-l/></token><token id="DeltaList(" axe:id="Data(" chars="\xbeList(" axe:chars="Data("><syntax>ΔList(&lt;list&gt;)</syntax><description>Returns a list containing the differences between consecutive elements in &lt;list&gt;.</description><keys>(2nd) [LIST] OPS 7:ΔList(</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/></token><token id="ref(" axe:id="Rect(" chars="ref(" axe:chars="Rect("><syntax>ref(&lt;matrix&gt;)</syntax><description>Returns the row-echelon form of a matrix &lt;matrix&gt;.</description><keys>(2nd) [MATRX] MATH A:ref(</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/></token><token id="rref(" axe:id="RectI(" chars="rref(" axe:chars="RectI("><syntax>rref(&lt;matrix&gt;)</syntax><description>Returns the reduced row-echelon form of a matrix &lt;matrix&gt;.</description><keys>(2nd) [MATRX] MATH B:rref(</keys><axe:syntax/><axe:description/><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/></token><token id="&gt;Rect" axe:id="&gt;Hex" chars="\x05Rect" axe:chars="\x05Hex"><syntax>&lt;value&gt;▶Rect</syntax><description>Displays &lt;value&gt; in rectangular format.</description><keys>(MATH) CPX 6:▶Rect</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="&gt;Polar" chars="\x05Polar"><syntax>&lt;value&gt;▶Polar</syntax><description>Displays complex &lt;value&gt; in polar format.</description><keys>(MATH) CPX 7:▶Polar</keys></token><token id="[e]" chars="\xdb"><syntax/><description/><keys/><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="SinReg " axe:id="Freq(" chars="SinReg " axe:chars="Freq("><syntax>SinReg {&lt;regequ&gt;} OR SinReg &lt;iterations&gt; OR SinReg {&lt;iterations&gt;,}&lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;period&gt;}{,&lt;reqequ&gt;}</syntax><description>Attempts &lt;iterations&gt; times (defaulting to 3) to fit a sinusoidal regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) using period guess &lt;period&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC C:SinReg</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Logistic " chars="Logistic "><syntax>Logistic {&lt;regequ&gt;} OR Logistic &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a logistic regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC B:Logistic</keys></token><token id="LinRegTTest " chars="LinRegTTest "><syntax>LinRegTTest {&lt;regequ&gt;} OR LinRegTTest &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;alternative&gt;}{,&lt;regequ&gt;}</syntax><description>Performs a linear regression and a Student's t-test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero.</description><keys>(STAT) TESTS E:LinRegTTest</keys></token><token id="ShadeNorm(" axe:id="rotC(" chars="ShadeNorm(" axe:chars="rotC("><syntax>ShadeNorm(&lt;lowerbound&gt;,&lt;upperbound&gt;{,&lt;μ&gt;,&lt;σ&gt;})</syntax><description>Draws the normal density function specified by mean &lt;μ&gt; and standard deviation &lt;σ&gt; (defaulting to 0 and 1, respectively) and shades the area between &lt;lowerbound&gt; and &lt;upperbound&gt;.</description><keys>(2nd) [DISTR] DRAW 1:ShadeNorm(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Shade_t(" axe:id="rotCC(" chars="Shade_t(" axe:chars="rotCC("><syntax>Shade_t(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;df&gt;)</syntax><description>Draws the density function for the Student's t distribution specified by degrees of freedom &lt;df&gt;, and shades the area between &lt;lowerbound&gt; and &lt;upperbound&gt;.</description><keys>(2nd) [DISTR] DRAW 2:Shade_t(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Shadechi^2(" axe:id="flipV(" chars="Shade\xd9\x12(" axe:chars="flipV("><syntax>Shadeχ²(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;df&gt;)</syntax><description>Draws the density function for the χ² distribution specified by degrees of freedom &lt;df&gt; and shades the area between &lt;lowerbound&gt; and &lt;upperbound&gt;.</description><keys>(2nd) [DISTR] DRAW 3:Shadeχ²(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="ShadeF(" axe:id="flipH(" chars="Shade\xda(" axe:chars="flipH("><syntax>ShadeF(&lt;lowerbound&gt;,&lt;upperbound&gt;,&lt;numeratordf&gt;,&lt;denominatordf&gt;)</syntax><description>Draws the density function for the F distribution specified by &lt;numeratordf&gt; (degrees of freedom) and &lt;denominatordf&gt; and shades the area between &lt;lowerbound&gt; and &lt;upperbound&gt;.</description><keys>(2nd) [DISTR] DRAW 4:ShadeF(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Matr&gt;list(" chars="Matr\x05list("><syntax>Matr▶list(&lt;matrixname&gt;,&lt;listname1&gt;{,&lt;listname2&gt;,...,&lt;listnameN&gt;}) OR Matr▶list(&lt;matrix&gt;,&lt;columnnumber&gt;,&lt;listname&gt;)</syntax><description>Fills a &lt;listname&gt; with elements from a specified column &lt;columnnumber&gt; in &lt;matrix&gt; or each &lt;listname&gt; with elements from each column in &lt;matrix&gt;.</description><keys>(2nd) [LIST] OPS A:Matr▶list(</keys></token><token id="List&gt;matr(" chars="List\x05matr("><syntax>List▶matr(&lt;listname1&gt;{,&lt;listname2&gt;,...,&lt;listnameN&gt;},&lt;matrixname&gt;)</syntax><description>Fills &lt;matrixname&gt; column by column with the elements from each specified &lt;listname&gt;.</description><keys>(2nd) [LIST] OPS 0:List▶matr(</keys></token><token id="Z-Test(" chars="Z-Test("><syntax>T-Test &lt;m0&gt;,&lt;σ&gt;{,&lt;listname&gt;{,&lt;freqlist&gt;}{,&lt;alternative&gt;{,&lt;drawflag}}} OR T-Test &lt;m0&gt;,&lt;σ&gt;,&lt;μ&gt;,&lt;n&gt;{,&lt;alternative&gt;{,&lt;drawflag}}</syntax><description>Performs a Student's t-test with frequency &lt;freqlist&gt;. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated. &lt;listname&gt; defaults to L₁.</description><keys>(STAT) TESTS 1:Z-Test(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="T-Test" chars="T-Test"><syntax>T-Test &lt;m0&gt;{,&lt;listname&gt;{,&lt;freqlist&gt;}{,&lt;alternative&gt;{,&lt;drawflag}}} OR T-Test &lt;m0&gt;,&lt;μ&gt;,&lt;sx&gt;,&lt;n&gt;{,&lt;alternative&gt;{,&lt;drawflag}}</syntax><description>Performs a Student's t-test with frequency &lt;freqlist&gt;. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated. &lt;listname&gt; defaults to L₁.</description><keys>(STAT) TESTS 2:T-Test</keys></token><token id="2-SampZTest(" chars="2-SampZTest("><syntax>2-SampTInt &lt;s1&gt;,&lt;s2&gt;{,&lt;listname1&gt;,&lt;listname2&gt;{,&lt;freqlist1&gt;{,&lt;freqlist2&gt;}}{,&lt;alternative&gt;{,&lt;drawflag&gt;}}} OR 2.SampTInt &lt;s1&gt;,&lt;s2&gt;,&lt;m1&gt;,&lt;n1&gt;,&lt;sx2&gt;,&lt;n2&gt;{,&lt;alternative&gt;{,&lt;drawflag&gt;}}</syntax><description>Computes a two-sample z-test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated. &lt;listname1&gt; and &lt;listname2&gt; default to L₁ and L₂, respectively.</description><keys>(STATS) TESTS 3:2-SampZTest</keys></token><token id="1-PropZTest(" chars="1-PropZTest("><syntax>1-PropZTest(&lt;p0&gt;,&lt;x&gt;,&lt;n&gt;{,&lt;alternative&gt;{,&lt;drawflag&gt;}})</syntax><description>Computes a one-proportion z-test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated.</description><keys>(STAT) TESTS 5:1-PropZTest(</keys></token><token id="2-PropZTest(" chars="2-PropZTest("><syntax>1-PropZTest(&lt;x1&gt;,&lt;n1&gt;,&lt;x2&gt;,&lt;n2&gt;{,&lt;alternative&gt;{,&lt;drawflag&gt;}})</syntax><description>Computes a two-proportion z-test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated.</description><keys>(STAT) TESTS 6:2-PropZTest(</keys></token><token id="chi^2-Test(" chars="\xd9\x12-Test("><syntax>χ²-Test(&lt;observedmatrix&gt;,&lt;expectedmatrix&gt;{,&lt;drawflag&gt;})</syntax><description>Performs a chi-square test. &lt;drawflag&gt;=1 draws results. &lt;drawflag&gt;=0 calculates results.</description><keys>(STAT) TESTS C:χ²-Test(</keys></token><token id="ZInterval" chars="ZInterval"><syntax>ZInterval &lt;σ&gt;{,&lt;listname&gt;,&lt;freqlist&gt;,&lt;confidence&gt;} OR ZInterval &lt;σ&gt;,&lt;μ&gt;,&lt;n&gt;{,&lt;confidence&gt;}</syntax><description>Computes a z confidence interval.</description><keys>(STATS) TESTS 7:ZInterval</keys></token><token id="2-SampZInt(" chars="2-SampZInt("><syntax>2-SampTInt &lt;s1&gt;,&lt;s2&gt;{,&lt;listname1&gt;,&lt;listname2&gt;{,&lt;freqlist1&gt;{,&lt;freqlist2&gt;}}{,&lt;confidence&gt;}} OR 2.SampTInt &lt;s1&gt;,&lt;s2&gt;,&lt;m1&gt;,&lt;n1&gt;,&lt;sx2&gt;,&lt;n2&gt;{,&lt;confidence&gt;}</syntax><description>Computes a two-sample z confidence interval. &lt;listname1&gt; and &lt;listname2&gt; default to L₁ and L₂, respectively, and &lt;confidence&gt; defaults to 95.</description><keys>(STATS) TESTS 9:2-SampZInt</keys></token><token id="1-PropZInt(" chars="1-PropZInt("><syntax>1-PropZInt(x,n{,&lt;confidence&gt;})</syntax><description>Computes a one-proportion z confidence interval. &lt;confidence&gt; defaults to 95.</description><keys>(STAT) TESTS A:1-PropZInt(</keys></token><token id="2-PropZInt(" chars="2-PropZInt("><syntax>2-PropZInt(&lt;x1&gt;,&lt;n1&gt;,&lt;x2&gt;,&lt;n2&gt;{,&lt;confidence&gt;})</syntax><description>Computes a two-proportion z confidence interval. &lt;confidence&gt; defaults to 95.</description><keys>(STAT) TESTS B:2-PropZInt(</keys></token><token id="GraphStyle(" chars="GraphStyle("><syntax>GraphStyle(&lt;functionnumber&gt;,&lt;graphstylenumber&gt;)</syntax><description>Sets graph style &lt;graphstylenumber&gt; for function &lt;functionnumber&gt;.</description><keys>(PRGM) CTL H:GraphStyle(</keys></token><token id="2-SampTTest " chars="2-SampTTest "><syntax>2-SampTInt {&lt;listname1&gt;,&lt;listname2&gt;{,&lt;freqlist1&gt;{,&lt;freqlist2&gt;}}{,&lt;alternative&gt;{,&lt;pooled&gt;{,&lt;drawflag&gt;}}}} OR 2.SampTInt &lt;m1&gt;,&lt;sx1&gt;,&lt;n1&gt;,&lt;m2&gt;,&lt;sx2&gt;,&lt;n2&gt;{,&lt;alternative&gt;{,&lt;pooled&gt;{,&lt;drawflag&gt;}}}</syntax><description>Computes a two-sample Student's t-test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;pooled&gt; is not zero, variances are pooled. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated. &lt;listname1&gt; and &lt;listname2&gt; default to L₁ and L₂, respectively.</description><keys>(STATS) TESTS 4:2-SampTTest</keys></token><token id="2-SampFTest " chars="2-SampFTest "><syntax>2-SampFTest {&lt;listname1&gt;,&lt;listname2&gt;{,&lt;freqlist1&gt;{,&lt;freqlist2&gt;}}{,&lt;alternative&gt;{,&lt;drawflag&gt;}}} OR 2.SampFTest &lt;sx1&gt;,&lt;n1&gt;,&lt;sx2&gt;,&lt;n2&gt;{,&lt;alternative&gt;{,&lt;drawflag&gt;}}</syntax><description>Computes a two-sample F test. Test is left-tailed if &lt;alternative&gt; is negative, right-tailed if &lt;alternative&gt; is positive, and two-tailed if &lt;alternative is zero. If &lt;drawflag&gt; is not zero, results are drawn rather than calculated. &lt;listname1&gt; and &lt;listname2&gt; default to L₁ and L₂, respectively.</description><keys>(STATS) TESTS D:2-SampFTest</keys></token><token id="TInterval " chars="TInterval "><syntax>TInterval {&lt;confidence&gt;} OR TInterval &lt;listname&gt;{,&lt;freqname&gt;}{,&lt;confidence&gt;} OR TInterval &lt;μ&gt;,&lt;sx&gt;,&lt;n&gt;{,&lt;confidence&gt;}</syntax><description>Computes a t confidence interval. &lt;listname&gt; defaults to L₁ and &lt;confidence&gt; defaults to 95.</description><keys/></token><token id="2-SampTInt " chars="2-SampTInt "><syntax>2-SampTInt {&lt;listname1&gt;,&lt;listname2&gt;{,&lt;freqlist1&gt;{,&lt;freqlist2&gt;}}{,&lt;confidence&gt;{,&lt;pooled&gt;}}} OR 2.SampTInt &lt;m1&gt;,&lt;sx1&gt;,&lt;n1&gt;,&lt;m2&gt;,&lt;sx2&gt;,&lt;n2&gt;{,&lt;confidence&gt;{,&lt;pooled&gt;}}</syntax><description>Computes a two-sample t confidence interval.  If &lt;pooled&gt; is not zero, variances are pooled. &lt;listname1&gt; and &lt;listname2&gt; default to L₁ and L₂, respectively, and &lt;confidence&gt; defaults to 95.</description><keys>(STATS) TESTS 0:2-SampTInt</keys></token><token id="SetUpEditor " chars="SetUpEditor "><syntax>SetUpEditor {&lt;listname1&gt;,...,&lt;listnameN&gt;}</syntax><description>Removes all list names from the stat list editor, then sets it up to display one or more &lt;listnames&gt; in the specified order, starting in column 1, or restores list names L₁ through L₆ to columns 1 through 6 if no &lt;listnames&gt; are provided.</description><keys>(STAT) EDIT 5:SetUpEditor</keys></token><token id="Pmt_End" chars="Pmt_End"><syntax>Pmt_End</syntax><description>Specifies an annuity due, where payments occur at the end of each payment period.</description><keys>(APPS) 1:Finance CALC E:Pmt_End</keys></token><token id="Pmt_Bgn" chars="Pmt_Bgn"><syntax>Pmt_Bgn</syntax><description>Specifies an annuity due, where payments occur at the beginning of each payment period.</description><keys>(APPS) 1:Finance CALC F:Pmt_Bgn</keys></token><token id="Real" chars="Real"><syntax>Real</syntax><description>Sets mode to display complex results only when you enter complex numbers.</description><keys>(MODE) Real</keys></token><token id="re^thetai" chars="r\xdb^[\xd7"><syntax>re^θ𝑖</syntax><description>Sets the mode to polar complex number mode (re^θ𝑖).</description><keys>(MODE) re^θ𝑖</keys></token><token id="a+bi" chars="a+b\xd7"><syntax>a+bi</syntax><description>Sets the mode to rectangular complex number mode (a+bi).</description><keys>(2nd) [MODE] a+bi</keys></token><token id="ExprOn" chars="ExprOn"><syntax>ExprOn</syntax><description>Turns on the expression display during TRACE.</description><keys>(2nd) [FORMAT] ExprOn</keys></token><token id="ExprOff" chars="ExprOff"><syntax>ExprOff</syntax><description>Turns off the expression display during TRACE.</description><keys>(2nd) [FORMAT] ExprOff</keys></token><token id="ClrAllLists" chars="ClrAllLists"><syntax>ClrAllLists</syntax><description>Sets to 0 the dimension of all lists in&lt;br /&gt;memory.</description><keys>(2nd) [MEM] MEMORY 4:ClrAllLists</keys></token><token id="GetCalc(" chars="GetCalc("><syntax>GetCalc(&lt;variable&gt;)</syntax><description>Gets contents of &lt;variable&gt; on a linked calculator and stores it to &lt;variable&gt; on the receiving calculator.</description><keys>(PRGM) I/O 0:GetCalc(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="DelVar " chars="DelVar "><syntax>DelVar &lt;variable&gt;</syntax><description>Deletes from memory the contents of &lt;variable&gt;.</description><keys>(PRGM) CTL G:DelVar</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Equ&gt;String(" chars="Equ\x05String("><syntax>Equ▶String(&lt;equationname&gt;,&lt;stringname&gt;)</syntax><description>Converts the contents of &lt;equationname&gt; to a string and stores it in &lt;stringname&gt;).</description><keys>(2nd) [CATALOG] Equ▶String(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="String&gt;Equ(" chars="String\x05Equ("><syntax>String▶Equ(&lt;stringname&gt;,&lt;equationname&gt;)</syntax><description>Converts the contents of &lt;stringname&gt; to an equation and stores it in &lt;equationname&gt;).</description><keys>(2nd) [CATALOG] String▶Equ(</keys></token><token id="Clear Entries" chars="Clear Entries"><syntax>Clear Entries</syntax><description>Clears the contents of the Last Entry storage area.</description><keys>(2nd) [MEM] MEMORY 3:Clear Entries</keys></token><token id="Select(" chars="Select("><syntax>Select(&lt;xlistname&gt;,&lt;ylistname&gt;)</syntax><description>Selects one or more specific data points from a scatter plot or xyLine plot (only), and then stores the selected data points to two new lists, &lt;xlistname&gt; and &lt;ylistname&gt;.</description><keys>(2nd) [LIST] OPS 8:Select(</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="ANOVA(" chars="ANOVA("><syntax>ANOVA(&lt;list1&gt;,&lt;list2&gt;{,&lt;list3&gt;,...,&lt;list20&gt;})</syntax><description>Performs a one-way analysis of variance for comparing the means of two to 20 populations.</description><keys>(STAT) TESTS F:ANOVA(</keys></token><token id="ModBoxplot" chars="ModBoxplot"><syntax>Plot&lt;plotnumber&gt;(ModBoxplot,&lt;xlistname&gt;{,&lt;freqlist&gt;}{,&lt;mark&gt;})</syntax><description>Defines plot 1, 2, or 3 as a box-and-whisker plot with outliers for &lt;xlistname&gt; and optional &lt;freqlist&gt; using mark &lt;mark&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 4:ModBoxplot</keys></token><token id="NormProbPlot" chars="NormProbPlot"><syntax>Plot&lt;plotnumber&gt;(NormProbPlot,&lt;datalistname&gt;{,&lt;axis&gt;}{,&lt;mark&gt;})</syntax><description>Defines plot 1, 2, or 3 as a normal probability plot for &lt;datalistname&gt; as &lt;axis&gt; (either X or Y) using mark &lt;mark&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 6:NormProbPlot</keys></token><token/><token/><token/><token/><token/><token/><token/><token/><token id="G-T" chars="G-T"><syntax>G-T</syntax><description>Sets graph-table vertical split-screen mode.</description><keys>(MODE) G-T</keys></token><token id="ZoomFit" chars="ZoomFit"><syntax>ZoomFit</syntax><description>Recalculates Ymin and Ymax to include the minimum and maximum Y values, between Xmin and Xmax, of the selected functions and replots the functions.</description><keys>(ZOOM) ZOOM 0:ZoomFit</keys></token><token id="DiagnosticOn" chars="DiagnosticOn"><syntax>DiagnosticOn</syntax><description>Sets diagnostics-on mode; r, r², and R² are displayed as regression model results.</description><keys/><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="DiagnosticOff" chars="DiagnosticOff"><syntax>DiagnosticOff</syntax><description>Sets diagnostics-off mode; r, r², and R² are not displayed as regression model results.</description><keys>(2nd) [CATALOG] DiagnosticOff</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="Archive " chars="Archive "><syntax>Archive &lt;variable&gt;</syntax><description>Moves the specified variables from RAM to the user data archive memory. Some variables can never be archived.</description><keys>(2nd) [MEM] 5:Archive</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="UnArchive " chars="UnArchive "><syntax>UnArchive &lt;variable&gt;</syntax><description>Moves the specified variables from the user data archive memory to RAM. Some variables can never be unarchived.</description><keys>(2nd) [MEM] 6:UnArchive</keys><axe:syntax/><axe:description/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Asm(" chars="Asm("><syntax>Asm(prgm&lt;name&gt;)</syntax><description>Executes an assembly language program.</description><keys>(2nd) [CATALOG] Asm(</keys><axe:syntax>Asm(&lt;hex&gt;)</axe:syntax><axe:description>Native assembly code written in hexadecimal is inserted at the current position.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="AsmComp(" axe:id="#Axiom(" chars="AsmComp(" axe:chars="#Axiom("><syntax>AsmComp(prgm&lt;nameA&gt;,prgm&lt;nameB&gt;)</syntax><description>Compiles an assembly language program written in ASCII and stores the hex version.</description><keys>(2nd) [CATALOG] AsmComp(</keys><axe:syntax>#Axiom(&lt;name&gt;)</axe:syntax><axe:description>The Axiom assembly library becomes usable in the program. No quotes needed; just type the name of the appvar case sensitive.</axe:description><axe:size/><axe:time/></token><token id="AsmPrgm" chars="AsmPrgm"><syntax>AsmPrgm</syntax><description>Must be used as the first line of an assembly language program.</description><keys>(2nd) [CATALOG] AsmPrgm</keys><grammer:syntax/><grammer:description/></token><token/><token id="Á" chars="\x8a"><syntax/><description/><keys/></token><token id="À" chars="\x8b"><syntax/><description/><keys/></token><token id="Â" chars="\x8c"><syntax/><description/><keys/></token><token id="Ä" chars="\x8d"><syntax/><description/><keys/></token><token id="á" chars="\x8e"><syntax/><description/><keys/></token><token id="à" chars="\x8f"><syntax/><description/><keys/></token><token id="â" chars="\x90"><syntax/><description/><keys/></token><token id="ä" chars="\x91"><syntax/><description/><keys/></token><token id="É" chars="\x92"><syntax/><description/><keys/></token><token id="È" chars="\x93"><syntax/><description/><keys/></token><token id="Ê" chars="\x94"><syntax/><description/><keys/></token><token id="Ë" chars="\x95"><syntax/><description/><keys/></token><token id="é" chars="\x96"><syntax/><description/><keys/></token><token id="è" chars="\x97"><syntax/><description/><keys/></token><token id="ê" chars="\x98"><syntax/><description/><keys/></token><token id="ë" chars="\x99"><syntax/><description/><keys/></token><token/><token id="Ì" chars="\x9b"><syntax/><description/><keys/></token><token id="Î" chars="\x9c"><syntax/><description/><keys/></token><token id="Ï" chars="\x9d"><syntax/><description/><keys/></token><token id="í" chars="\x9e"><syntax/><description/><keys/></token><token id="ì" chars="\x9f"><syntax/><description/><keys/></token><token id="î" chars="\xa0"><syntax/><description/><keys/></token><token id="ï" chars="\xa1"><syntax/><description/><keys/></token><token id="Ó" chars="\xa2"><syntax/><description/><keys/></token><token id="Ò" chars="\xa3"><syntax/><description/><keys/></token><token id="Ô" chars="\xa4"><syntax/><description/><keys/></token><token id="Ö" chars="\xa5"><syntax/><description/><keys/></token><token id="ó" chars="\xa6"><syntax/><description/><keys/></token><token id="ò" chars="\xa7"><syntax/><description/><keys/></token><token id="ô" chars="\xa8"><syntax/><description/><keys/></token><token id="ö" chars="\xa9"><syntax/><description/><keys/></token><token id="Ú" chars="\xaa"><syntax/><description/><keys/></token><token id="Ù" chars="\xab"><syntax/><description/><keys/></token><token id="Û" chars="\xac"><syntax/><description/><keys/></token><token id="Ü" chars="\xad"><syntax/><description/><keys/></token><token id="ú" chars="\xae"><syntax/><description/><keys/></token><token id="ù" chars="\xaf"><syntax/><description/><keys/></token><token id="û" chars="\xb0"><syntax/><description/><keys/></token><token id="ü" chars="\xb1"><syntax/><description/><keys/></token><token id="Ç" chars="\xb2"><syntax/><description/><keys/></token><token id="ç" chars="\xb3"><syntax/><description/><keys/></token><token id="Ñ" chars="\xb4"><syntax/><description/><keys/></token><token id="ñ" chars="\xb5"><syntax/><description/><keys/></token><token/><token/><token id="^^:" chars="\xb8"><syntax/><description/><keys/></token><token id="\xb9" chars="\xb9"><syntax/><description/><keys/></token><token id="|!" chars="\xba"><syntax/><description/><keys/></token><token id="alpha" chars="\xbb"><syntax/><description/><keys/></token><token id="beta" chars="\xbc"><syntax/><description/><keys/></token><token id="gamma" chars="\xbd"><syntax/><description/><keys/></token><token id="Delta" chars="\xbe"><syntax/><description/><keys/></token><token id="delta" chars="\xbf"><syntax/><description/><keys/></token><token id="epsilon" chars="\xc0"><syntax/><description/><keys/></token><token id="lambda" chars="\xc2"><syntax/><description/><keys/></token><token id="mu" chars="\xc3"><syntax/><description/><keys/></token><token id="pi" chars="\xc4"><syntax/><description/><keys/></token><token id="rho" chars="\xc5"><syntax/><description/><keys/></token><token id="Sigma" chars="\xc6"><syntax/><description/><keys/></token><token/><token id="phi" chars="\xc9"><syntax/><description/><keys/></token><token id="Omega" chars="\xca"><syntax/><description/><keys/></token><token id="phat" chars="\xd8"><syntax/><description/><keys/></token><token id="chi" chars="\xd9"><syntax/><description/><keys/></token><token id="|F" chars="\xda"><syntax/><description/><keys/></token><token id="a" chars="a"><syntax/><description/><keys/></token><token id="b" chars="b"><syntax/><description/><keys/></token><token id="c" chars="c"><syntax/><description/><keys/></token><token id="d" chars="d"><syntax/><description/><keys/></token><token id="e" chars="e"><syntax/><description/><keys/></token><token id="f" chars="f"><syntax/><description/><keys/></token><token id="g" chars="g"><syntax/><description/><keys/></token><token id="h" chars="h"><syntax/><description/><keys/></token><token id="i" chars="i"><syntax/><description/><keys/></token><token id="j" chars="j"><syntax/><description/><keys/></token><token id="k" chars="k"><syntax/><description/><keys/></token><token/><token id="l" chars="l"><syntax/><description/><keys/></token><token id="m" chars="m"><syntax/><description/><keys/></token><token id="n" chars="n"><syntax/><description/><keys/></token><token id="o" chars="o"><syntax/><description/><keys/></token><token id="p" chars="p"><syntax/><description/><keys/></token><token id="q" chars="q"><syntax/><description/><keys/></token><token id="r" chars="r"><syntax/><description/><keys/></token><token id="s" chars="s"><syntax/><description/><keys/></token><token id="t" chars="t"><syntax/><description/><keys/></token><token id="u" chars="u"><syntax/><description/><keys/></token><token id="v" chars="v"><syntax/><description/><keys/></token><token id="w" chars="w"><syntax/><description/><keys/></token><token id="x" chars="x"><syntax/><description/><keys/></token><token id="y" chars="y"><syntax/><description/><keys/></token><token id="z" chars="z"><syntax/><description/><keys/></token><token id="sigma" chars="\xc7"><syntax/><description/><keys/></token><token id="tau" chars="\xc8"><syntax/><description/><keys/></token><token id="Í" chars="\x9a"><syntax/><description/><keys/></token><token id="GarbageCollect" chars="GarbageCollect"><syntax>GarbageCollect</syntax><description>Displays the garbage collection menu to allow cleanup of unused archive memory.</description><keys>(2nd) [CATALOG] GarbageCollect</keys></token><token id="|~" chars="~"><syntax/><description/><keys/></token><token/><token id="@" chars="@"><syntax/><description/><keys/></token><token id="#" chars="#"><syntax/><description/><keys/></token><token id="$" chars="$"><syntax/><description/><keys/></token><token id="&amp;" chars="&amp;"><syntax/><description/><keys/></token><token/><token id=";" chars=";"><syntax/><description/><keys/></token><token id="\\" chars="\\"><syntax/><description/><keys/></token><token id="|" chars="|"><syntax/><description/><keys/></token><token id="_" chars="_"><syntax/><description/><keys/></token><token id="%" chars="%"><syntax/><description/><keys/></token><token id="..." chars="\xce"><syntax/><description/><keys/></token><token id="|&lt;" chars="\x13"><syntax/><description/><keys/></token><token id="sharps" chars="\xf4"><syntax/><description/><keys/></token><token id="^^x" chars="\xcd"><syntax/><description/><keys/></token><token id="smallT" chars="\x0d"><syntax/><description/><keys/></token><token id="small0" chars="\x80"><syntax/><description/><keys/></token><token id="small1" chars="\x81"><syntax/><description/><keys/></token><token id="small2" chars="\x82"><syntax/><description/><keys/></token><token id="small3" chars="\x83"><syntax/><description/><keys/></token><token id="small4" chars="\x84"><syntax/><description/><keys/></token><token id="small5" chars="\x85"><syntax/><description/><keys/></token><token id="small6" chars="\x86"><syntax/><description/><keys/></token><token id="small7" chars="\x87"><syntax/><description/><keys/></token><token id="small8" chars="\x88"><syntax/><description/><keys/></token><token id="small9" chars="\x89"><syntax/><description/><keys/></token><token id="small10" chars="\x1d"><syntax/><description/><keys/></token><token id="&lt;|" chars="\xcf"><syntax/><description/><keys/></token><token id="|&gt;" chars="\x05"><syntax/><description/><keys/></token><token id="uparrow" chars="\x1e"><syntax/><description/><keys/></token><token id="downarrow" chars="\x1f"><syntax/><description/><keys/></token><token/><token id="xmark" chars="\x09"><syntax/><description/><keys/></token><token id="integral" chars="\x08"><syntax/><description/><keys/></token><token id="bolduparrow" chars="\xef"><syntax/><description/><keys/></token><token id="bolddownarrow" chars="\xf0"><syntax/><description/><keys/></token><token id="squareroot" chars="\x10"><syntax/><description/><keys/></token><token id="invertedequal" chars="\x7f"><syntax/><description/><keys/></token></table><token id="sqrt(" chars="\x10("><syntax>√(&lt;value&gt;)</syntax><description>Returns square root of a real or complex number, expression, or list.</description><keys>(2nd) [√(]</keys><axe:syntax>sqrt(&lt;value&gt;)</axe:syntax><axe:description>Returns square root of a number.</axe:description><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/></token><token id="cuberoot(" chars="\x0e\x10("><syntax>³√(&lt;value&gt;)</syntax><description>Returns the cube root of a real or complex number, expression, or list.</description><keys>(MATH) MATH 4:³√(</keys></token><token id="ln(" chars="ln("><syntax>ln(&lt;value&gt;)</syntax><description>Returns the natural logarithm of a real or complex number, expression, or list.</description><keys>(LN)</keys><axe:syntax>ln(&lt;value&gt;)</axe:syntax><axe:description>Returns logarithm base two of &lt;value&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax>ln(&lt;number&gt;)</grammer:syntax><grammer:description>Jumps &lt;number&gt; lines forward or backward.</grammer:description></token><token id="e^(" chars="\xdb^("><syntax>e^(&lt;value&gt;)</syntax><description>Returns e raised to power &lt;value&gt; or a list of e raised to a list &lt;value&gt; of powers.</description><keys>(2nd) [eˣ]</keys><axe:syntax>e^(&lt;value&gt;)</axe:syntax><axe:description>Returns 2 raised to the &lt;value&gt; power.</axe:description><axe:size/><axe:time/></token><token id="log(" axe:id="lambda(" chars="log(" axe:chars="lambda("><syntax>log(&lt;value&gt;)</syntax><description>Returns logarithm of a real or complex number, expression, or list.</description><keys>(LOG)</keys><axe:syntax>λ({&lt;param1&gt;,...,&lt;param6&gt;})</axe:syntax><axe:description>Creates an anonymous subroutine accepting arguments in r₁ through r₆ and returns its address.</axe:description><axe:size/><axe:time/></token><token id="10^(" chars="\x1d^("><syntax>₁₀^(&lt;value&gt;)</syntax><description>Returns 10 raised to the &lt;value&gt; power. &lt;value&gt; can be a real or complex number expression, or list.</description><keys>(2nd) [10ˣ]</keys></token><token id="sin(" chars="sin("><syntax>sin(&lt;value&gt;)</syntax><description>Returns the sine of a real number, expression, or list.</description><keys>(SIN)</keys><axe:syntax>sin(&lt;value&gt;)</axe:syntax><axe:description>Returns the sine of the number. One period is 256 and the value returned ranges from -127 to 127.</axe:description><axe:size/><axe:time/></token><token id="sin^-1(" chars="sin\x11("><syntax>sin⁻¹(&lt;value&gt;)</syntax><description>Returns the arcsine of a real number, expression, or list.</description><keys>(2nd) [SIN⁻¹]</keys></token><token id="cos(" chars="cos("><syntax>cos(&lt;value&gt;)</syntax><description>Returns cosine of a real number, expression, or list.</description><keys>(COS)</keys><axe:syntax>cos(&lt;value&gt;)</axe:syntax><axe:description>Returns the cosine of the number. One period is 256 and the value returned ranges from -127 to 127.</axe:description><axe:size/><axe:time/></token><token id="cos^-1(" chars="cos\x11("><syntax>cos⁻¹(&lt;value&gt;)</syntax><description>Returns arccosine of a real number, expression, or list.</description><keys>(2nd) [COS⁻¹]</keys></token><token id="tan(" chars="tan("><syntax>tan(&lt;value&gt;)</syntax><description>Returns the tangent of a real number, expression, or list.</description><keys>(TAN)</keys></token><token id="tan^-1(" chars="tan\x11("><syntax>tan⁻¹(&lt;value&gt;)</syntax><description>Returns the arctangent of a real number, expression, or list.</description><keys>(2nd) [TAN⁻¹]</keys><axe:syntax>tan⁻¹(&lt;dx&gt;,&lt;dy&gt;)</axe:syntax><axe:description>Returns the angle of a path that moves &lt;dx&gt; right and &lt;dy&gt; up. One period is 256 and both &lt;dx&gt; and &lt;dy&gt; range from -512 to 512.</axe:description><axe:size/><axe:time/></token><token id="sinh(" chars="sinh("><syntax>sinh(&lt;value&gt;)</syntax><description>Returns the hyperbolic sine of a real number, expression, or list.</description><keys>(2nd) [CATALOG] sinh(</keys></token><token id="sinh^-1(" chars="sinh\x11("><syntax>sinh⁻¹(&lt;value&gt;)</syntax><description>Returns the hyperbolic arcsine of a real number, expression, or list.</description><keys>(2nd) [CATALOG] sinh⁻¹(</keys></token><token id="cosh(" chars="cosh("><syntax>cosh(&lt;value&gt;)</syntax><description>Returns hyperbolic cosine of a real number, expression, or list.</description><keys>(2nd) [CATALOG] cosh(</keys></token><token id="cosh^-1(" chars="cosh\x11("><syntax>cosh⁻¹(&lt;value&gt;)</syntax><description>Returns hyperbolic arccosine of a real number, expression, or list.</description><keys>(2nd) [CATALOG] cosh⁻¹(</keys></token><token id="tanh(" chars="tanh("><syntax>tanh(&lt;value&gt;)</syntax><description>Returns hyperbolic tangent of a real number, expression, or list.</description><keys>(2nd) [CATALOG] tanh(</keys></token><token id="tanh^-1(" chars="tanh\x11("><syntax>tan⁻¹(&lt;value&gt;)</syntax><description>Returns the hyperbolic arctangent of a real number, expression, or list.</description><keys>(2nd) [CATALOG] tan⁻¹(</keys></token><token id="If " chars="If "><syntax>If &lt;condition&gt;:&lt;command&gt; OR If &lt;condition&gt;:Then:&lt;commandsA&gt;{:Else:&lt;commandsB&gt;}:End</syntax><description>Executes &lt;command&gt; or &lt;commandsA&gt; if &lt;condition&gt; is met and &lt;commandsB&gt; if &lt;condition&gt; is not met.</description><keys>(PRGM) CTL 1:If</keys><axe:syntax>If &lt;condition&gt;:&lt;commandsA&gt;{:Else:&lt;commandsB&gt;}:End</axe:syntax><axe:description>Executes &lt;commandsA&gt; if &lt;condition&gt; is met and &lt;commandsB&gt; if &lt;condition&gt; is not met.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Then" chars="Then"><syntax>If &lt;condition&gt;:Then:&lt;commandsA&gt;{:Else:&lt;commandsB&gt;}:End</syntax><description>Executes &lt;commandsA&gt; if &lt;condition&gt; is met and &lt;commandsB&gt; if &lt;condition&gt; is not met.</description><keys>(PRGM) CTL 2:Then</keys><grammer:syntax/><grammer:description/></token><token id="Else" chars="Else"><syntax>If &lt;condition&gt;:Then:&lt;commandsA&gt;:Else:&lt;commandsB&gt;:End</syntax><description>Executes &lt;commandsA&gt; if &lt;condition&gt; is met and &lt;commandsB&gt; if &lt;condition&gt; is not met.</description><keys>(PRGM) CTL 3:Else</keys><axe:syntax>If &lt;condition&gt;:&lt;commandsA&gt;:Else:&lt;commandsB&gt;:End</axe:syntax><axe:description>Executes &lt;commandsA&gt; if &lt;condition&gt; is met and &lt;commandsB&gt; if &lt;condition&gt; is not met.</axe:description><axe:size/><axe:time/></token><token id="While " chars="While "><syntax>While &lt;condition&gt;:&lt;commands&gt;:End</syntax><description>Executes &lt;commands&gt; while &lt;condition&gt; is true. &lt;condition&gt; is checked at the beginning.</description><keys>(PRGM) CTL 5:While</keys><axe:syntax>While &lt;condition&gt;:&lt;commands&gt;:End</axe:syntax><axe:description>Executes &lt;commands&gt; while &lt;condition&gt; is true. &lt;condition&gt; is checked at the beginning.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Repeat " chars="Repeat "><syntax>Repeat &lt;condition&gt;:&lt;commands&gt;:End</syntax><description>Executes &lt;commands&gt; until &lt;condition&gt; is true. &lt;condition&gt; is checked at the end; that is, &lt;commands&gt; will be executed at least once.</description><keys>(PRGM) CTL 6:Repeat</keys><axe:syntax>Repeat &lt;condition&gt;:&lt;commands&gt;:End</axe:syntax><axe:description>Executes &lt;commands&gt; until &lt;condition&gt; is true. &lt;condition&gt; is checked at the beginning.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="For(" chars="For("><syntax>For(&lt;variable&gt;,&lt;begin&gt;,&lt;end&gt;{,&lt;increment&gt;}):&lt;commands&gt;:End</syntax><description>Executes &lt;commands&gt;, incrementing &lt;variable&gt; from &lt;begin&gt; by &lt;increment&gt; (defaulting to 1) until &lt;variable&gt; is greater than &lt;end&gt;.</description><keys>(PRGM) CTL 4:For(</keys><axe:syntax>For(&lt;variable&gt;,&lt;begin&gt;,&lt;end&gt;):&lt;commands&gt;:End OR For(&lt;iterations&gt;):&lt;commands&gt;:End</axe:syntax><axe:description>Executes &lt;commands&gt;, incrementing &lt;variable&gt; from &lt;begin&gt; by 1 until &lt;variable&gt; is greater than &lt;end&gt;, or &lt;iterations&gt; times in total. If one argument is provided, Goto cannot be used within &lt;commands&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax>For(&lt;variable&gt;,&lt;begin&gt;,&lt;end&gt;):&lt;commands&gt;:End OR For(&lt;iterations&gt;):&lt;commands&gt;:End</grammer:syntax><grammer:description>Executes &lt;commands&gt;, incrementing &lt;variable&gt; from &lt;begin&gt; by 1 until &lt;variable&gt; is greater than &lt;end&gt;, or &lt;iterations&gt; times in total. If one argument is provided, Goto cannot be used within &lt;commands&gt;.</grammer:description></token><token id="End" chars="End"><syntax>End</syntax><description>Identifies end of For(, If-Then-Else, Repeat, or While loop.</description><keys>(PRGM) CTL 7:End</keys><axe:syntax>End{{!}If &lt;condition&gt;}</axe:syntax><axe:description>Identifies end of For(, If-Then-Else, Repeat, or While loop. An If condition can be provided to exit a While or Repeat loop only if &lt;condition&gt; is met.</axe:description><axe:size/><axe:time/><grammer:syntax>End</grammer:syntax><grammer:description>Identifies end of For(, If-Then-Else, Repeat, or While loop.</grammer:description></token><token id="Return" chars="Return"><syntax>Return</syntax><description>Returns to the calling program or to the home screen if none.</description><keys>(PRGM) CTL E:Return</keys><axe:syntax>Return{{!}If &lt;condition&gt;} OR Return&lt;value&gt;</axe:syntax><axe:description>Returns from the current subroutine or program, optionally with a value. If &lt;condition&gt; is provided, returns only if it is true.</axe:description><axe:syntax-r/><axe:description-r/><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Lbl " chars="Lbl "><syntax>Lbl &lt;label&gt;</syntax><description>Creates a &lt;label&gt; of one or two characters.</description><keys>(PRGM) CTL 9:Lbl</keys><axe:syntax>Lbl &lt;label&gt;</axe:syntax><axe:description>Creates a &lt;label&gt; of one to thirteen characters.</axe:description><axe:size/><axe:time/><grammer:syntax>Lbl &lt;label&gt;{,&lt;varname&gt;}</grammer:syntax><grammer:description>Returns a pointer to the label called string &lt;label&gt; in &lt;varname&gt; or the current program.</grammer:description></token><token id="Goto " chars="Goto "><syntax>Goto &lt;label&gt;</syntax><description>Transfers control to &lt;label&gt;.</description><keys>(PRGM) CTL 0:Goto</keys><axe:syntax>Goto &lt;label&gt;</axe:syntax><axe:description>Transfers control to &lt;label&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax>Goto &lt;pointer&gt;</grammer:syntax><grammer:description>Transfers control to &lt;pointer&gt;.</grammer:description></token><token id="Pause " chars="Pause "><syntax>Pause {&lt;value&gt;}</syntax><description>Displays &lt;value&gt; if provided; suspends program execution until you press (ENTER).</description><keys>(PRGM) CTL 8:Pause</keys><axe:syntax>Pause &lt;time&gt;</axe:syntax><axe:description>Pauses execution for &lt;time&gt;, in the order of milliseconds.</axe:description><axe:size/><axe:time/><grammer:syntax>Pause &lt;time&gt; OR Pause If &lt;expression&gt;</grammer:syntax><grammer:description>Suspends program execution for &lt;time&gt; centiseconds or while &lt;expression&gt; is true.</grammer:description></token><token id="Stop" chars="Stop"><syntax>Stop</syntax><description>Ends program execution; returns to home screen.</description><keys>(PRGM) CTL F:Stop</keys><axe:syntax>Stop</axe:syntax><axe:description>Pauses execution until the next interrupt occurs. Interrupts must be on or else the calculator will freeze.</axe:description><axe:size/><axe:time/></token><token id="IS&gt;(" chars="IS&gt;("><syntax>IS&gt;(&lt;variable&gt;,&lt;value&gt;):&lt;line&gt;</syntax><description>Increments &lt;variable&gt; by one, and skips the next line if the result is greater than &lt;value&gt;.</description><keys>(PRGM) CTL A:IS&gt;(</keys><grammer:syntax>IS&gt;(&lt;variable&gt;)</grammer:syntax><grammer:description>Reads the byte pointed to by the pointer &lt;variable&gt;, then increments &lt;variable&gt;.</grammer:description></token><token id="DS&lt;(" chars="DS&lt;("><syntax>DS&lt;(&lt;variable&gt;,&lt;value&gt;):&lt;command&gt;</syntax><description>Decrements &lt;variable&gt; by 1; skips the next line if &lt;variable&gt; is less than &lt;value&gt;.</description><keys>(PRGM) CTL B:DS&lt;(</keys><axe:syntax>DS&lt;(&lt;variable&gt;,&lt;value&gt;):&lt;commands&gt;:End</axe:syntax><axe:description>Decrements &lt;variable&gt; by 1; if variable is zero, executes &lt;commands&gt; and resets &lt;variable&gt; to &lt;value&gt;.</axe:description><axe:size/><axe:time/></token><token id="Input " axe:id="input" chars="Input " axe:chars="input"><syntax>Input {{&lt;string&gt;,}&lt;variable&gt;}</syntax><description>When given no arguments, displays the graph screen is displayed and waits for the user to select a point with the cursor, storing coordinates in X and Y; when arguments are given, prompts for value to store to &lt;variable&gt;, displaying &lt;text&gt; if it is given and "?" otherwise.</description><keys>(PRGM) I/O 1:Input</keys><axe:syntax>input</axe:syntax><axe:description>Prompts for a string and returns a pointer to it (as tokens, not characters).</axe:description><axe:size/><axe:time/><grammer:syntax>Input {&lt;suffix&gt;}</grammer:syntax><grammer:description>Prompts for a string from the user, starting at the end of the current text coordinates, and returns a pointer to the string. &lt;suffix&gt; is kept displayed at the end of the input string, if given.</grammer:description></token><token id="Prompt " chars="Prompt "><syntax>Prompt &lt;variable1&gt;{,&lt;variable2&gt;,...,&lt;variableN&gt;}</syntax><description>Prompts for value for &lt;variable1&gt;, then &lt;variable2&gt;, and so on.</description><keys>(PRGM) I/O 2:Prompt</keys></token><token id="Disp " chars="Disp "><syntax>Disp [&lt;value1&gt;[,...[,&lt;valueN&gt;]]]</syntax><description>Displays the home screen and each value provided.</description><keys>(PRGM) I/O 3:Disp</keys><axe:syntax>Disp &lt;string&gt; OR Disp &lt;value&gt;▶&lt;mode&gt;</axe:syntax><axe:description>The string that is pointed to is displayed at the cursor position. The cursor moves with the string. If it reaches the end of the screen, it will loop around to the next line.</axe:description><axe:size/><axe:time/><grammer:syntax>&lt;n&gt;→Disp OR Disp °&lt;buffer&gt; OR Disp '&lt;buffer&gt;</grammer:syntax><grammer:description>Defines contrast level or default primary buffer, or default secondary buffer, respectively.</grammer:description></token><token id="DispGraph" chars="DispGraph"><syntax>DispGraph</syntax><description>Displays the graph.</description><keys>(PRGM) I/O 4:DispGraph</keys><axe:syntax>DispGraph{(&lt;buffer&gt;)}</axe:syntax><axe:description>Draws the main buffer or specified buffer to the screen.</axe:description><axe:syntax-r>DispGraph{(&lt;bufferA&gt;,&lt;bufferB&gt;)}ʳ</axe:syntax-r><axe:description-r>Draws the specified buffers to the screen for three-level grayscale. &lt;bufferA&gt; and &lt;bufferB&gt; default to the main and back buffers, respectively.</axe:description-r><axe:syntax-r-r>DispGraphʳʳ</axe:syntax-r-r><axe:description-r-r>Draws the specified buffers to the screen for four-level grayscale. &lt;bufferA&gt; and &lt;bufferB&gt; default to the main and back buffers, respectively.</axe:description-r-r><axe:size/><axe:time/><grammer:syntax>DispGraph{&lt;buffer&gt;}</grammer:syntax><grammer:description>Draws the contents of the screen to the LCD, updating one gray cycle. The optional argument allows you to update a different buffer, other than the default.</grammer:description></token><token id="Output(" chars="Output("><syntax>Output(&lt;row&gt;,&lt;column&gt;,&lt;value&gt;)</syntax><description>Displays &lt;value&gt; beginning at specified &lt;row&gt; and &lt;column&gt;.</description><keys>(PRGM) I/O 6:Output(</keys><axe:syntax>Output(&lt;column&gt;,&lt;row&gt;{,&lt;string&gt;}) OR Output(&lt;position&gt;)</axe:syntax><axe:description>Moves the cursor coordinates to (&lt;column&gt;,&lt;row&gt;), counting from 0, or to &lt;position&gt;, whose high byte should be column and low byte should be row. &lt;string&gt; is then displayed at the new location.</axe:description><axe:size/><axe:time/><grammer:syntax>Output(&lt;mode&gt;{,&lt;font&gt;})</grammer:syntax><grammer:description>Sets the text writing mode. 0 is the standard 4x6 font; 1 is a variable-width font; 2 is the 4x6 font using pixel coordinates instead of a character map; 3 is an Omnicalc-format font. &lt;font&gt; points to a custom font.</grammer:description></token><token id="ClrHome" chars="ClrHome"><syntax>ClrHome</syntax><description>Clears the home screen.</description><keys>(PRGM) I/O 8:ClrHome</keys><axe:syntax>ClrHome</axe:syntax><axe:description>Erases the screen and text shadow and moves the cursor to the upper left corner.</axe:description><axe:size/><axe:time/><grammer:syntax>ClrHome</grammer:syntax><grammer:description>Resets the homescreen cursor and clears the homescreen.</grammer:description></token><token id="Fill(" chars="Fill("><syntax>Fill(&lt;number&gt;,&lt;name&gt;)</syntax><description>Stores &lt;value&gt; to each element in matrix or list &lt;name&gt;.</description><keys>(2nd) [MATRX] MATH 4:Fill(</keys><axe:syntax>Fill(&lt;pointer&gt;,&lt;size&gt;{,&lt;value&gt;})</axe:syntax><axe:description>Fills &lt;size&gt; bytes after &lt;pointer&gt; with the byte at &lt;pointer&gt;, or fills &lt;size&gt; bytes starting at &lt;pointer&gt; with byte &lt;value&gt;. If &lt;value&gt; is provided, &lt;size&gt; must be greater than 1; if not, it must be greater than 0.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="SortA(" chars="SortA("><syntax>SortA(&lt;keylistname&gt;{,&lt;dependlist1&gt;...&lt;dependlistN&gt;})</syntax><description>Sorts elements of &lt;keylistname&gt; in ascending order, then sorts each &lt;dependlist&gt; as a dependent list using elements in &lt;keylistname&gt; as keys.</description><keys>(2nd) [LIST] OPS 1:SortA(</keys></token><token id="SortD(" chars="SortD("><syntax>SortD(&lt;keylistname&gt;{,&lt;dependlist1&gt;...&lt;dependlistN&gt;})</syntax><description>Sorts elements of &lt;keylistname&gt; in descending order, then sorts each &lt;dependlist&gt; as a dependent list using elements in &lt;keylistname&gt; as keys.</description><keys>(2nd) [LIST] OPS 2:SortD(</keys><axe:syntax>SortD(&lt;pointer&gt;,&lt;size&gt;)</axe:syntax><axe:description>Sorts up to 256 bytes of data from largest to smallest starting at the pointed address.</axe:description><axe:size/><axe:time/></token><token id="DispTable" chars="DispTable"><syntax>DispTable</syntax><description>Displays the table.</description><keys>(PRGM) I/O 5:DispTable</keys></token><token id="Menu(" chars="Menu("><syntax>Menu(&lt;title&gt;,&lt;text1&gt;,&lt;label1&gt;{,&lt;text2&gt;,&lt;label2&gt;,...,&lt;text7&gt;,&lt;label7&gt;})</syntax><description>Generates a menu of up to seven items during program execution.</description><keys>(PRGM) CTL C:Menu(</keys><grammer:syntax>Menu(&lt;y&gt;,&lt;x&gt;,&lt;width&gt;,&lt;title&gt;,&lt;item1&gt;{,&lt;item2&gt;,...,&lt;label7&gt;})</grammer:syntax><grammer:description>Draws a menu at (&lt;x&gt;,&lt;y&gt;) with width &lt;width&gt; and returns the number of the item selected, counting from 0.</grammer:description></token><token id="Send(" chars="Send("><syntax>Send(&lt;variable&gt;)</syntax><description>Sends contents of &lt;variable&gt; to the CBL 2/CBL or CBR System.</description><keys>(PRGM) I/O B:Send(</keys><axe:syntax>Send(&lt;value&gt;,&lt;time&gt;)</axe:syntax><axe:description>Attempts for &lt;time&gt;, in the order of microseconds to send &lt;value&gt; as a byte to a linked calculator; stops upon successful reception or timeout.</axe:description><axe:size/><axe:time/><grammer:syntax/><grammer:description/></token><token id="Get(" axe:id="Get" chars="Get(" axe:chars="Get"><syntax>Get(&lt;variable&gt;)</syntax><description>Gets data from the CBL 2/CBL or CBR and stores it in &lt;variable&gt;.</description><keys>(PRGM) I/O A:Get(</keys><axe:syntax>Get</axe:syntax><axe:description>Returns the byte sent by the linked calculator or -1 if no byte was sent. Does not wait.</axe:description><axe:size/><axe:time/><grammer:syntax>Get(&lt;varname&gt;)</grammer:syntax><grammer:description>Returns a pointer to variable &lt;varname&gt; and stores the flash page it's on to θ' (0 if in RAM).</grammer:description></token><token id="PlotsOn " chars="PlotsOn "><syntax>PlotsOn {&lt;functionnumber1&gt;,...,&lt;functionnumberN&gt;}</syntax><description>Selects all stat plots or one or more specified stat plots (1, 2, or 3).</description><keys/></token><token id="PlotsOff " chars="PlotsOff "><syntax>PlotsOff {&lt;data&gt;}</syntax><description>Turns off all plots or specifically the ones listed in &lt;data&gt; (which should be a sequence of numbers between 0 and 3, separated by commas).</description><keys/></token><token id="|L" chars="\xbe"><syntax>ʟ&lt;name&gt;</syntax><description>Returns the list named &lt;name&gt;.</description><keys>(2nd) [LIST] OPS B:ʟ</keys><axe:syntax>ʟ&lt;label&gt;</axe:syntax><axe:description>Returns the address of the label &lt;label&gt;.</axe:description><axe:size/><axe:time/><grammer:syntax>ʟ&lt;number&gt;{,&lt;start&gt;{,&lt;size&gt;{,&lt;delim&gt;}}}</grammer:syntax><grammer:description>This will execute a given line starting at the beginning of the program. &lt;start&gt; is an optional argument to give it a different start address (like a label, for example), &lt;size&gt; is the size of the search field (defaulting to 0, or 65536) and is useful to make sure it doesn't execute code outside the program, and &lt;delim&gt; is the char code of the line delimiter used (defaulting to newline).</grammer:description></token><token id="Plot1(" axe:id="Pt-Mask(" chars="Plot1(" axe:chars="Pt-Mask("><syntax>Plot1(&lt;type&gt;,&lt;data&gt;)</syntax><description>Defines a plot in Plot1. See Scatter, xyLine, Histogram, ModBoxPlot, BoxPlot, or NormProbPlot for information on the arguments in &lt;data&gt;.</description><keys>(2nd) [STAT PLOT] PLOTS 1:Plot1(</keys><axe:syntax>Pt-Mask(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;)</axe:syntax><axe:description>The two consecutive 8-by-8 sprites are drawn to the main buffer and back buffer, respectively. Bits clear on both sprites are ignored (transparent); the other three combinations are black, gray, and white.</axe:description><axe:syntax-r>Pt-Change(&lt;x&gt;,&lt;y&gt;,&lt;sprite&gt;{,&lt;buffer&gt;})ʳ</axe:syntax-r><axe:description-r>The two consecutive 8-by-8 sprites are drawn to the main buffer or specified buffer. Bits clear on both sprites are ignored (transparent); the other three combinations are black, white, and inverted.</axe:description-r><axe:size/><axe:time/></token><token id="Plot2(" axe:id="pt-Get(" chars="Plot2(" axe:chars="pt-Get("><syntax>Plot2(&lt;type&gt;,&lt;data&gt;)</syntax><description>Defines a plot in Plot2. See Scatter, xyLine, Histogram, ModBoxPlot, BoxPlot, or NormProbPlot for information on the arguments in &lt;data&gt;.</description><keys>(2nd) [STAT PLOT] PLOTS 2:Plot2(</keys><axe:syntax>pt-Get(&lt;x&gt;,&lt;y&gt;{,&lt;buffer&gt;{,&lt;temp&gt;}})</axe:syntax><axe:description>Creates a temporary copy of the 8-by-8 sprite at (&lt;x&gt;,&lt;y&gt;) on the main buffer or specified buffer and returns a pointer to it, or copies a temporary copy of it to &lt;temp&gt;.</axe:description><axe:syntax-r>pt-Get(&lt;x&gt;,&lt;y&gt;)ʳ</axe:syntax-r><axe:description-r>Creates a temporary copy of the 8-by-8 sprite at (&lt;x&gt;,&lt;y&gt;) on the back buffer and returns a pointer to it.</axe:description-r><axe:size/><axe:time/></token><token id="Plot3(" chars="Plot3("><syntax>Plot3(&lt;type&gt;,&lt;data&gt;)</syntax><description>Defines a plot in Plot3. See Scatter, xyLine, Histogram, ModBoxPlot, BoxPlot, or NormProbPlot for information on the arguments in &lt;data&gt;.</description><keys>(2nd) [STAT PLOT] PLOTS 3:Plot3(</keys></token><token/><token id="^" chars="^"><syntax>&lt;value&gt;^&lt;power&gt;</syntax><description>Returns &lt;value&gt; raised to &lt;power&gt;, or elements in list or matrix &lt;value&gt; raised to &lt;power&gt;. &lt;value&gt; can be a real or complex number, expression, list, or matrix.</description><keys>(^)</keys><axe:syntax/><axe:description/><axe:size/><axe:time/></token><token id="xroot" chars="\xcd\x10"><syntax>&lt;valueA&gt;ˣ√&lt;valueB&gt;</syntax><description>Returns root &lt;valueA&gt; of &lt;valueB&gt;. &lt;valueA&gt; and &lt;valueB&gt; can be real numbers or lists.</description><keys>(MATH) MATH 5:ˣ√</keys></token><token id="1-Var Stats " chars="1-Var Stats "><syntax>1-Var Stats {&lt;xlistname&gt;{,&lt;freqlist&gt;}}</syntax><description>Performs one-variable analysis on the data in &lt;xlistname&gt; with frequency &lt;freqlist&gt;.</description><keys>(STAT) CALC 1:1-Var Stats</keys></token><token id="2-Var Stats " chars="2-Var Stats "><syntax>2-Var Stats {&lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}}</syntax><description>Performs two-variable analysis on the data in &lt;xlistname&gt; and &lt;ylistname&gt; with frequency &lt;freqlist&gt;.</description><keys>(STAT) CALC 2:2-Var Stats</keys></token><token id="LinReg(a+bx) " chars="LinReg(a+bx) "><syntax>LinReg(a+bx) {&lt;regequ&gt;} OR LinReg(a+bx) &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a linear regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 8:LinReg(a+bx)</keys></token><token id="ExpReg " chars="ExpReg "><syntax>ExpReg [&lt;regequ&gt;] OR ExpReg [&lt;xlistname&gt;[,&lt;ylistname&gt;[,&lt;freqlist&gt;[,&lt;regequ&gt;]]]]</syntax><description>Fits an exponential regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 0:ExpReg</keys></token><token id="LnReg " chars="LnReg "><syntax>LnReg {&lt;regequ&gt;} OR LnReg &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a logarithmic regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 9:LnReg</keys><axe:syntax>LnReg</axe:syntax><axe:description>Returns the calculator to normal interrupt mode; should be called before quitting if the program uses custom interrupts.</axe:description><axe:size/><axe:time/></token><token id="PwrReg " chars="PwrReg "><syntax>PwrReg {&lt;regequ&gt;} OR PwrReg &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a power regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC A:PwrReg</keys></token><token id="Med-Med " chars="Med-Med "><syntax>Med-Med {&lt;regequ&gt;} OR Med-Med &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a median-median model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 3:Med-Med</keys></token><token id="QuadReg " chars="QuadReg "><syntax>QuadReg {&lt;regequ&gt;} OR QuadReg &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a quadratic regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 5:QuadReg</keys></token><token id="ClrList " chars="ClrList "><syntax>ClrList &lt;listname1&gt;[,&lt;listname2&gt;[,...[,&lt;listnameN&gt;]]]</syntax><description>Sets to 0 the dimension of one or more &lt;listnames&gt;.</description><keys>(STAT) EDIT 4:ClrList</keys></token><token id="ClrTable" axe:id="port" chars="ClrTable" axe:chars="port"><syntax>ClrTable</syntax><description>Clears all values from the table.</description><keys>(PRGM) I/O 9:ClrTable</keys><axe:syntax>{&lt;value&gt;→}port</axe:syntax><axe:description>Gets or sets the status of the link port as a two-bit number. If the status is changed, the program should set it back to zero before quitting.</axe:description><axe:size/><axe:time/></token><token id="Histogram" chars="Histogram"><syntax>Plot&lt;plotnumber&gt;(Histogram,&lt;xlistname&gt;{,&lt;freqlist&gt;})</syntax><description>Defines plot 1, 2, or 3 as a histogram for &lt;xlistname&gt; and optional &lt;freqlist&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 3:Histogram</keys></token><token id="xyLine" chars="xyLine"><syntax>Plot&lt;plotnumber&gt;(xyLine,&lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;mark&gt;})</syntax><description>Defines plot 1, 2, or 3 as a connected scatter plot for &lt;xlistname&gt; and &lt;ylistname&gt; using mark &lt;mark&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 2:xyLine</keys></token><token id="Scatter" chars="Scatter"><syntax>Plot&lt;plotnumber&gt;(Scatter,&lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;mark&gt;})</syntax><description>Defines plot 1, 2, or 3 as a scatter plot for &lt;xlistname&gt; and &lt;ylistname&gt; using mark &lt;mark&gt;.</description><keys>(2nd) [STAT PLOT] TYPE 1:Scatter</keys></token><token id="LinReg(ax+b) " chars="LinReg(ax+b) "><syntax>LinReg(ax+b) {&lt;regequ&gt;} OR LinReg(ax+b) &lt;xlistname&gt;,&lt;ylistname&gt;{,&lt;freqlist&gt;}{,&lt;regequ&gt;}</syntax><description>Fits a linear regression model to &lt;xlistname&gt; and &lt;ylistname&gt; (defaulting to L₁ and L₂, respectively) with frequency &lt;freqlist&gt;, and stores the regression equation to &lt;regequ&gt;.</description><keys>(STAT) CALC 4:LinReg(ax+b)</keys></token></table>
